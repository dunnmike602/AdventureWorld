<?xml version="1.0" encoding="utf-8"?>
<Root>
  <RoomDesigner>
    <DesignerItems>
      <DesignerItem>
        <Left>250</Left>
        <Top>300</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>57055445-1e44-4e67-99c4-0ada955b726d</ID>
        <zIndex>0</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Jail Cell" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Jail Cell" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>250</Left>
        <Top>100</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a</ID>
        <zIndex>2</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Corridor" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Corridor" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>450</Left>
        <Top>100</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>0bd3fe93-4d28-4418-b708-f97289624ecd</ID>
        <zIndex>3</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="East Corridor" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="East Corridor" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>650</Left>
        <Top>100</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>d5e5f953-6585-4ca6-aa1f-bd4faf71a65b</ID>
        <zIndex>5</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Kitchen" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Kitchen" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>50</Left>
        <Top>100</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>b4386267-8e76-4a74-a4b3-c524d614652c</ID>
        <zIndex>11</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="West Corridor" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="West Corridor" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>50</Left>
        <Top>300</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>86899a2e-6f5a-4855-95eb-e6544b37c047</ID>
        <zIndex>14</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Spiral Stairs" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Spiral Stairs" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>650</Left>
        <Top>300</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>bf8439dd-7efc-4c82-85f4-7a9804465f4b</ID>
        <zIndex>17</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Utility Room" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Utility Room" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>160.36842105263156</Left>
        <Top>0</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>6548f49f-524a-44a8-81d8-46214d97d985</ID>
        <zIndex>19</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="RoomGrid" ToolTip="Room" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF0000FF" Name="RoomRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="ROOM1" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="RoomText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="ROOM1" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="RoomImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Room</StencilObjectType>
      </DesignerItem>
    </DesignerItems>
    <Connections>
      <Connection>
        <SourceID>121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a</SourceID>
        <SinkID>0bd3fe93-4d28-4418-b708-f97289624ecd</SinkID>
        <SourceConnectorName>Right</SourceConnectorName>
        <SinkConnectorName>Left</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>4</zIndex>
        <ID>fce1216f-e4d7-4a61-a3b7-d6adcdccb8a3</ID>
      </Connection>
      <Connection>
        <SourceID>0bd3fe93-4d28-4418-b708-f97289624ecd</SourceID>
        <SinkID>d5e5f953-6585-4ca6-aa1f-bd4faf71a65b</SinkID>
        <SourceConnectorName>Right</SourceConnectorName>
        <SinkConnectorName>Left</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>6</zIndex>
        <ID>f0669b6a-aeda-4f9b-9d6a-ea4b2a041c24</ID>
      </Connection>
      <Connection>
        <SourceID>0bd3fe93-4d28-4418-b708-f97289624ecd</SourceID>
        <SinkID>121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a</SinkID>
        <SourceConnectorName>Left</SourceConnectorName>
        <SinkConnectorName>Right</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>7</zIndex>
        <ID>70632d7d-28b0-4bc4-80e4-8e06f0622db7</ID>
      </Connection>
      <Connection>
        <SourceID>d5e5f953-6585-4ca6-aa1f-bd4faf71a65b</SourceID>
        <SinkID>0bd3fe93-4d28-4418-b708-f97289624ecd</SinkID>
        <SourceConnectorName>Left</SourceConnectorName>
        <SinkConnectorName>Right</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>8</zIndex>
        <ID>652bacd0-5bfa-44f5-b968-4a8e9e2f03f9</ID>
      </Connection>
      <Connection>
        <SourceID>57055445-1e44-4e67-99c4-0ada955b726d</SourceID>
        <SinkID>121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a</SinkID>
        <SourceConnectorName>Top</SourceConnectorName>
        <SinkConnectorName>Bottom</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>9</zIndex>
        <ID>3e0eacba-9f9d-48de-9edd-526b06298ffd</ID>
      </Connection>
      <Connection>
        <SourceID>121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a</SourceID>
        <SinkID>57055445-1e44-4e67-99c4-0ada955b726d</SinkID>
        <SourceConnectorName>Bottom</SourceConnectorName>
        <SinkConnectorName>Top</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>10</zIndex>
        <ID>21f437cb-b75d-42ad-b6ad-368525e4a885</ID>
      </Connection>
      <Connection>
        <SourceID>121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a</SourceID>
        <SinkID>b4386267-8e76-4a74-a4b3-c524d614652c</SinkID>
        <SourceConnectorName>Left</SourceConnectorName>
        <SinkConnectorName>Right</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>12</zIndex>
        <ID>445e8a80-000c-4708-b2e3-65623c5f632c</ID>
      </Connection>
      <Connection>
        <SourceID>b4386267-8e76-4a74-a4b3-c524d614652c</SourceID>
        <SinkID>121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a</SinkID>
        <SourceConnectorName>Right</SourceConnectorName>
        <SinkConnectorName>Left</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>13</zIndex>
        <ID>3fe0e19c-eac8-4391-b545-d8c31b7e36ac</ID>
      </Connection>
      <Connection>
        <SourceID>b4386267-8e76-4a74-a4b3-c524d614652c</SourceID>
        <SinkID>86899a2e-6f5a-4855-95eb-e6544b37c047</SinkID>
        <SourceConnectorName>Bottom</SourceConnectorName>
        <SinkConnectorName>Top</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>15</zIndex>
        <ID>d4c524a1-f652-459d-81e9-8a2cee5cfc35</ID>
      </Connection>
      <Connection>
        <SourceID>86899a2e-6f5a-4855-95eb-e6544b37c047</SourceID>
        <SinkID>b4386267-8e76-4a74-a4b3-c524d614652c</SinkID>
        <SourceConnectorName>Top</SourceConnectorName>
        <SinkConnectorName>Bottom</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>16</zIndex>
        <ID>80421d26-c039-46cb-9eaa-58e544425886</ID>
      </Connection>
      <Connection>
        <SourceID>d5e5f953-6585-4ca6-aa1f-bd4faf71a65b</SourceID>
        <SinkID>bf8439dd-7efc-4c82-85f4-7a9804465f4b</SinkID>
        <SourceConnectorName>Right</SourceConnectorName>
        <SinkConnectorName>Left</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>1</zIndex>
        <ID>65329a31-961a-4beb-9aa2-9c3c283d3788</ID>
      </Connection>
      <Connection>
        <SourceID>bf8439dd-7efc-4c82-85f4-7a9804465f4b</SourceID>
        <SinkID>d5e5f953-6585-4ca6-aa1f-bd4faf71a65b</SinkID>
        <SourceConnectorName>Top</SourceConnectorName>
        <SinkConnectorName>Bottom</SinkConnectorName>
        <SourceArrowSymbol>None</SourceArrowSymbol>
        <SinkArrowSymbol>Arrow</SinkArrowSymbol>
        <zIndex>18</zIndex>
        <ID>43e1481a-71ab-460d-a67e-56fa4ec9cad4</ID>
      </Connection>
    </Connections>
  </RoomDesigner>
  <ObjectDesigner>
    <DesignerItems>
      <DesignerItem>
        <Left>350</Left>
        <Top>200</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>8dde5f2a-a555-47f7-9d44-539ba6ed0304</ID>
        <zIndex>0</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Jail Door" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Jail Door" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Jail Cell" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Jail Cell" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>50</Left>
        <Top>350</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>7722fc82-a8c6-4e63-9aa4-dce476a371da</ID>
        <zIndex>8</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Bed" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Bed" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Jail Cell" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Jail Cell" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>50</Left>
        <Top>650</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>413ed65b-d9c9-4d3b-8279-0d554879b531</ID>
        <zIndex>9</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Clock" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Clock" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Corridor" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Corridor" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>200</Left>
        <Top>350</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>2c031f7c-3761-46b8-aab5-fd8c300bc4a0</ID>
        <zIndex>7</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Rusty Leg" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Rusty Leg" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Jail Cell" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Jail Cell" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>200</Left>
        <Top>650</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>2b6d0ca6-13ac-4efc-a6c2-36da5221a15b</ID>
        <zIndex>1</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Wiring Alcove" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Wiring Alcove" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Corridor" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Corridor" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>50</Left>
        <Top>50</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>69d0c30f-12a1-425c-8d32-d098d47e5b99</ID>
        <zIndex>2</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="NpcGrid" ToolTip="Npc" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFDAA520" Name="NpcRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Robot" FontWeight="Bold" Foreground="#FF000000" TextAlignment="Center" TextWrapping="Wrap" Name="NpcText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Robot" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="NpcImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="NpcParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=NpcParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=NpcParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="West Corridor" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="NpcParentName" HorizontalAlignment="Left" VerticalAlignment="Center" Cursor="Hand" ToolTip="West Corridor" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Npc</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>350</Left>
        <Top>350</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>98209413-4fd6-4d91-8411-4baed591e507</ID>
        <zIndex>3</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Cylinder" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Cylinder" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Jail Cell" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Jail Cell" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>200</Left>
        <Top>200</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>56d1cedc-9f40-43fa-bbab-77d627bd0a9e</ID>
        <zIndex>4</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ContainerGrid" ToolTip="Container" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF556B2F" Name="ContainerRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Guard Jacket" FontWeight="Bold" Foreground="#FF000000" TextAlignment="Center" TextWrapping="Wrap" Name="ContainerText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Guard Jacket" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ContainerImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ContainerParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ContainerParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ContainerParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Jail Cell" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ContainerParentName" HorizontalAlignment="Left" VerticalAlignment="Center" Cursor="Hand" ToolTip="Jail Cell" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Container</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>50</Left>
        <Top>500</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>b15fb391-08b0-427e-954e-47a1e6f873d1</ID>
        <zIndex>5</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ContainerGrid" ToolTip="Container" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF556B2F" Name="ContainerRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Pocket" FontWeight="Bold" Foreground="#FF000000" TextAlignment="Center" TextWrapping="Wrap" Name="ContainerText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Pocket" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ContainerImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF556B2F" Name="ContainerParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ContainerParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ContainerParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Guard Jacket" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ContainerParentName" HorizontalAlignment="Left" VerticalAlignment="Center" Cursor="Hand" ToolTip="Guard Jacket" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Container</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>200</Left>
        <Top>50</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>1f6b9c52-ded7-4a2f-bd0b-1eb7750b6add</ID>
        <zIndex>6</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Paper Note" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Paper Note" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF556B2F" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Pocket" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Pocket" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>200</Left>
        <Top>500</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>59bb6753-9a1c-49c8-b514-86731b469faa</ID>
        <zIndex>0</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Empty Bottle" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Empty Bottle" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF556B2F" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Cupboard" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Cupboard" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>350</Left>
        <Top>50</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>a85bf1e4-67ed-4f7f-ac64-06a745e71bc6</ID>
        <zIndex>0</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ContainerGrid" ToolTip="Container" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FF556B2F" Name="ContainerRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Cupboard" FontWeight="Bold" Foreground="#FF000000" TextAlignment="Center" TextWrapping="Wrap" Name="ContainerText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Cupboard" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ContainerImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ContainerParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ContainerParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ContainerParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Kitchen" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ContainerParentName" HorizontalAlignment="Left" VerticalAlignment="Center" Cursor="Hand" ToolTip="Kitchen" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Container</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>50</Left>
        <Top>200</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>bef065ea-1246-4e35-bc8e-4ef30b2e2413</ID>
        <zIndex>0</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Sink" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Sink" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Kitchen" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Kitchen" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>350</Left>
        <Top>500</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>7910b440-e57c-46ba-b7fc-36377e730a38</ID>
        <zIndex>0</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="ObjectGrid" ToolTip="PlaceableObject" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFFF0000" Name="ObjectRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="Hammer" FontWeight="Bold" Foreground="#FF000000" TextWrapping="Wrap" Name="ObjectText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="Hammer" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="ObjectImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF556B2F" Name="ObjectParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=ObjectParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Cupboard" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="ObjectParentName" HorizontalAlignment="Left" VerticalAlignment="Center" ToolTip="Cupboard" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>PlaceableObject</StencilObjectType>
      </DesignerItem>
      <DesignerItem>
        <Left>NaN</Left>
        <Top>NaN</Top>
        <Width>100</Width>
        <Height>100</Height>
        <ID>92cd7556-64ba-4e5b-92be-94faf6bab2b4</ID>
        <zIndex>0</zIndex>
        <IsGroup>false</IsGroup>
        <ParentId>00000000-0000-0000-0000-000000000000</ParentId>
        <Content>&lt;Grid Name="NpcGrid" ToolTip="Npc" IsHitTestVisible="False" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"&gt;&lt;Border BorderThickness="1,1,1,1" BorderBrush="#FF000000"&gt;&lt;Grid Background="#FFFFF8DC"&gt;&lt;Grid.RowDefinitions&gt;&lt;RowDefinition Height="15" /&gt;&lt;RowDefinition Height="*" /&gt;&lt;RowDefinition Height="Auto" /&gt;&lt;/Grid.RowDefinitions&gt;&lt;Border Background="#FFDAA520" Name="NpcRectangle" Grid.Row="0" /&gt;&lt;TextBlock Text="NPC1" FontWeight="Bold" Foreground="#FF000000" TextAlignment="Center" TextWrapping="Wrap" Name="NpcText" Width="Auto" Height="Auto" HorizontalAlignment="Center" VerticalAlignment="Center" ToolTip="NPC1" Grid.Row="1" /&gt;&lt;Image Source="{x:Null}" Name="NpcImage" Opacity="0.2" Visibility="Visible" IsHitTestVisible="False" Grid.Row="1" /&gt;&lt;Border Background="#FF0000FF" Name="NpcParentNameBackGround" Height="18" VerticalAlignment="Bottom" Grid.Row="2"&gt;&lt;Border.Style&gt;&lt;Style TargetType="Border"&gt;&lt;Style.Triggers&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=NpcParentName}" Value=""&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;DataTrigger Binding="{Binding Path=Text, ElementName=NpcParentName}" Value="{x:Null}"&gt;&lt;Setter Property="UIElement.Visibility"&gt;&lt;Setter.Value&gt;&lt;x:Static Member="Visibility.Collapsed" /&gt;&lt;/Setter.Value&gt;&lt;/Setter&gt;&lt;/DataTrigger&gt;&lt;/Style.Triggers&gt;&lt;Style.Resources&gt;&lt;ResourceDictionary /&gt;&lt;/Style.Resources&gt;&lt;/Style&gt;&lt;/Border.Style&gt;&lt;TextBlock Text="Corridor" FontWeight="Bold" FontSize="10" Foreground="#FFFFFFFF" TextTrimming="CharacterEllipsis" TextWrapping="NoWrap" Name="NpcParentName" HorizontalAlignment="Left" VerticalAlignment="Center" Cursor="Hand" ToolTip="Corridor" /&gt;&lt;/Border&gt;&lt;/Grid&gt;&lt;/Border&gt;&lt;/Grid&gt;</Content>
        <StencilObjectType>Npc</StencilObjectType>
      </DesignerItem>
    </DesignerItems>
    <Connections />
  </ObjectDesigner>
  <AdventureGame>&lt;AdventureGameDesignerViewModel xmlns:i="http://www.w3.org/2001/XMLSchema-instance" z:Id="i1" xmlns:z="http://schemas.microsoft.com/2003/10/Serialization/" xmlns="http://schemas.datacontract.org/2004/07/DiagramDesigner.AdventureWorld.Domain"&gt;&lt;ControlId&gt;f16f1b54-32ad-4e4f-ac7c-952948203a77&lt;/ControlId&gt;&lt;AdventureCommandMappings&gt;&lt;AdventureCommandMapping z:Id="i2"&gt;&lt;ControlId&gt;2f1b4ce8-41ff-4b91-bcc6-a1b4d1499317&lt;/ControlId&gt;&lt;AliasList&gt;WORM
SLITHER&lt;/AliasList&gt;&lt;HelpText&gt;Crawl in the specified direction.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;4d440f45-42bc-4057-b2d3-3553b27d3f6b&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The Crawl command allows the player to crawl around the Adventure World.

def Execute(adventureCommand):
	return ExecuteGenericMove(adventureCommand)
	
	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;CRAWL&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i3"&gt;&lt;ControlId&gt;0830cee2-3fbb-4f36-abbe-9a7160ff7788&lt;/ControlId&gt;&lt;AliasList&gt;DEL
ERASE&lt;/AliasList&gt;&lt;HelpText&gt;Deletes the saved game with the specified name.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;34f3ab96-cb93-40b6-8697-fabb74f7532b&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The DELETE command allows you to delete a previous save game

def Execute(adventureCommand):
	if not ProcessFileOperationParametersForLength(adventureCommand):
		return False

	# Parameter is of the correct the file can be deleted
	if adventureCommand.Parameters.Count == 1:
		FileToDelete = adventureCommand.Parameters[0].OriginalWord
		
		gameText = AWApi.LoadSaveGame(FileToDelete);
		
		# This file does not exist
		if gameText == None:
			ConsoleApi.FormattedWrite(ThereIsNoFile);
			return False
			
		AWApi.DeleteSaveGame(FileToDelete);
		ConsoleApi.FormattedWrite("Save game successfully deleted.")
		return True
	
	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;DELETE&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i4"&gt;&lt;ControlId&gt;70632081-dc82-44f1-a1d4-c03b42262e1f&lt;/ControlId&gt;&lt;AliasList&gt;LEAVE&lt;/AliasList&gt;&lt;HelpText&gt;Drop object(s).&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;fa0e98dd-6f11-4380-a476-efadf9c266e3&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The DROP command allows the player to leave objects lying around

def Execute(adventureCommand):
	
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()

	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
		
	# Do we match any objects, first check to see if we are asking for anything
	parametersToCheck = wildcardGameWordList if adventureCommand.Parameters[0].Word.lower() in everythingWords else adventureCommand.GetParametersWithoutStopWords()
	objects = AWApi.GetObjectsFromNames(parametersToCheck, 70.0, True)

	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	if any(invalidObjects):
		ConsoleApi.FormattedWrite(DontKnowWord.format(invalidObjects[0].Name.upper()))
		return False
		
	# Valid Drop Object phrases
	currentDropObjectsPhrases = []
	
	# Build phrases for objects to be dropped based on the word that matched them
	phrase1 = originalCommandWord + " "
	phrase2 = originalCommandWord + " "
	
	for i in range(len(validObjects)):
		actualAndWord = andWord if i &amp;lt; len(validObjects) - 1 else ""
		phrase1 = phrase1 + '{} {} '.format(validObjects[i].WordThatMatchedThis, actualAndWord)
		phrase2 = phrase2 + '{} {} {} '.format(theWord, validObjects[i].WordThatMatchedThis, actualAndWord)
		
	currentDropObjectsPhrases.extend([ phrase1.strip(), phrase2.strip()])
	
	# Build phrases for objects to be dropped based on their actual names
	phrase1 = originalCommandWord + " "
	phrase2 = originalCommandWord + " "
		
	for i in range(len(validObjects)):
		actualAndWord = andWord if i &amp;lt; len(validObjects) - 1 else ""
		phrase1 = phrase1 + '{} {} '.format(validObjects[i].Name, actualAndWord)
		phrase2 = phrase2 + '{} {} {} '.format(theWord, validObjects[i].Name, actualAndWord)
			
	currentDropObjectsPhrases.extend([ phrase1.strip(), phrase2.strip()])
	
	# Add "all" words to support DROP ALL
	for word in everythingWords:
		currentDropObjectsPhrases.extend(['{} {}'.format(originalCommandWord, word)])
	
	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentDropObjectsPhrases):
		# We can't drop anything
		if validObjects.Count == 0:
			ConsoleApi.FormattedWrite("There isn't anything to drop!")
			return True
	
		return ProcessObjectListForDrop(validObjects, "dropped")
	
	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;DROP&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i5"&gt;&lt;ControlId&gt;22c3e0b9-ae8b-4134-9779-c5ee15de2ef4&lt;/ControlId&gt;&lt;AliasList i:nil="true" /&gt;&lt;HelpText&gt;Show help.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;a915176f-3405-4552-99d0-2d79b73e1109&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The HELP command allows the player to get some help

def Execute(adventureCommand):
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.WriteLine(AWApi.GetDefaultHelpText())
		return True

	return SentenceNotRecognised()
&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;HELP&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i6"&gt;&lt;ControlId&gt;aa791207-fdec-4720-be27-3f8bac40c821&lt;/ControlId&gt;&lt;AliasList&gt;INV
HOLDING&lt;/AliasList&gt;&lt;HelpText&gt;Show items you are holding.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;0e62e01f-e3bb-4aa9-ab7e-3c1af3ec0c20&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The INVENTORY shows what the player is holding

def InventoryHelper():
	if AWApi.GetInventory().Count == 0:
		ConsoleApi.FormattedWrite("You're not holding anything.")
		return True
    	
	ConsoleApi.FormattedWrite("You are holding:")

	for placeableObject in AWApi.GetInventory():
		ConsoleApi.FormattedWrite(placeableObject.InventoryDescription)
     
	return True 
           
def Execute(adventureCommand):
	if adventureCommand.Parameters.Count == 0:
		return InventoryHelper()

	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;INVENTORY&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i7"&gt;&lt;ControlId&gt;7810bf31-f7a0-475c-a15a-bdd482bd44f7&lt;/ControlId&gt;&lt;AliasList&gt;LS&lt;/AliasList&gt;&lt;HelpText&gt;List saved games.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;6cc3c470-90db-41a7-9655-59a1ec4f2826&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The LIST command shows all available games that have been saved
# Note this command is only every run on its own and so always returns false to stop command processing
def Execute(adventureCommand):
	if adventureCommand.Parameters.Count == 0:
		# Get a list of save games
		saveGames = AWApi.ListSaveGames()
		
		if saveGames.Count == 0:
			ConsoleApi.FormattedWrite("There are no saved games.")	
			return False
			
		# Loop through them and display each one
		for file in saveGames:
			ConsoleApi.WriteLine(file)
			
		return True

	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;LIST&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i8"&gt;&lt;ControlId&gt;d7be3e3a-2060-4438-8a21-49c30ef6d48c&lt;/ControlId&gt;&lt;AliasList&gt;LD&lt;/AliasList&gt;&lt;HelpText&gt;Loads the saved game with the specified name.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;69f911f4-622b-4d71-a6b2-2cfbb50f07b4&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The LOAD command allows you to load a saved game.

def Execute(adventureCommand):
	if not ProcessFileOperationParametersForLength(adventureCommand):
		return False

	# Parameter is of the correct the file can be deleted
	if adventureCommand.Parameters.Count == 1:
		FileToLoad = adventureCommand.Parameters[0].OriginalWord
		
		gameText = AWApi.LoadSaveGame(FileToLoad)
		
		# This file does not exist
		if gameText == None:
			ConsoleApi.FormattedWrite(ThereIsNoFile)
			return False
			
		loadedGame = AWApi.DeserializeFromString(gameText)
		 
		if loadedGame.Version &amp;lt;&amp;gt; AWApi.GameData.Version:
			ConsoleApi.FormattedWrite(InvalidGameVersion)
			return False
            
		AWApi.InitGameData(loadedGame);
		ConsoleApi.FormattedWrite("Game loaded successfully.")
		
		# We need to reset the time to be the same as it was when the game is starting
		AWApi.SetVariable("startGame", True)
		
		return True
	
	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;LOAD&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i9"&gt;&lt;ControlId&gt;0ae85c8e-3850-47ca-8d1c-57978a8dbf63&lt;/ControlId&gt;&lt;AliasList&gt;EXAMINE
INSPECT&lt;/AliasList&gt;&lt;HelpText&gt;Describe an object or look at whats around.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;43f78f03-eac8-4910-9b4e-acd6c3596d3c&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The LOOK command allows the player to examine rooms and objects
originalCommandWord = ""

def ShowRoomInformationHelper():
	# Give the chance for customisations to run and bail out of default actions if required.
	preProcessResult = Preprocess(CurrentLocation)
			
	if not preProcessResult:
		return False
		
	AWApi.ShowRoomInformation()
	
	return True
		
def ProcessPlaceableObjectHelper(objectToProcess, adventureCommand):
	matchedObjectName = objectToProcess.WordThatMatchedThis
	
	# Valid object phrases
	currentObjectPhrases = []
	
	for objectName in [objectToProcess.WordThatMatchedThis, objectToProcess.Name]:
		currentObjectPhrases.extend([ '{} {} {}'.format(lookWord, atWord, objectName), 
		'{} {} {} {}'.format(lookWord, atWord, theWord, objectName),
		'{} {} {}'.format(examineWord, theWord, objectName),
		'{} {}'.format(examineWord, objectName),
		'{} {} {}'.format(inspectWord, theWord, objectName),
		'{} {}'.format(inspectWord, objectName)])

	if not LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentObjectPhrases):
		return SentenceNotRecognised()
	
	if not AWApi.IsItemAvailableToExamine(objectToProcess):
		ConsoleApi.FormattedWrite("I don't see that here.")
		return False
		
	# Give the chance for customisations to run and bail out of default actions if required.
	preProcessResult = Preprocess(objectToProcess)
			
	if not preProcessResult:
		return False		
	
	# Describe the object
	ConsoleApi.FormattedWrite(objectToProcess.CurrentDescription)
	
	# If it is a container and open describe the object
	if type(objectToProcess) is Container and objectToProcess.IsOpen and AWApi.GetChildObjects(objectToProcess).Count &amp;gt; 0:
		ConsoleApi.FormattedWrite("Inside the {0}, you can see:".format(objectToProcess.Name))
		AWApi.ListChildObjectDescriptions(objectToProcess);
	
	return True
	
def Execute(adventureCommand):
	
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()
	
	# If the room is dark you certainly can't pick anything up
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite(IsDarkText)
		return True

	# Build a list of phrases that mean look at the current room
	lookAtRoomPhrases = [ lookWord , '{} {}'.format(lookWord, aroundWord), 
	'{} {} {}'.format(lookWord, aroundWord, roomWord), '{} {} {} {}'.format(lookWord, aroundWord, theWord, roomWord),
	'{} {} {}'.format(lookWord, atWord, roomWord), '{} {} {} {}'.format(lookWord, atWord, theWord, roomWord)]
	
	# If the command is look and there are no parameters or the parameter is a specific word we assume we are looking at the current room
	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), lookAtRoomPhrases):
		return ShowRoomInformationHelper()
	
	# If the command is not look and there are no parameters we need more information
	if originalCommandWord &amp;lt;&amp;gt; "LOOK" and adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False

	# Do we match any rooms or object (we must ignore the stop words at the moment)
	rooms = AWApi.GetRoomsFromNames(adventureCommand.GetParametersWithoutStopWords())
	objects = AWApi.GetObjectsFromNames(adventureCommand.GetParametersWithoutStopWords())
	
	# Check for words we don't understand
	invalidRooms = list(filter(lambda room: not room.IsValid, rooms))
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	
	# Check for words we don't understand
	if any(invalidObjects) and any(invalidRooms):
		badObject = NotNone(invalidObjects[0], invalidRooms[0])
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(badObject.Name.upper()))
		return False
	
	# We have only stopwords and therefore a meaningless sentence
	if rooms.Count == 0 + objects.Count == 0:
		return SentenceNotRecognised()
	
	# This command cannot work on multiple objects/rooms
	validRooms = list(filter(lambda room: room.IsValid, rooms))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	if validObjects.Count &amp;gt; 1:
		ConsoleApi.FormattedWrite("One thing at a time please!")
		return False
	
	if rooms.Count == 1 and AWApi.IsNameCurrentRoom(rooms[0].Name, 100.0):
		matchedRoomName = rooms[0].WordThatMatchedThis
		
		# If we are in the current room we can process the sentence as the current room
		currentRoomPhrases = [ '{} {} {}'.format(originalCommandWord, atWord, matchedRoomName), 
		'{} {} {} {}'.format(originalCommandWord, atWord, theWord, matchedRoomName),
		'{} {} {} {}'.format(originalCommandWord, aroundWord, theWord, matchedRoomName),
		'{} {} {}'.format(originalCommandWord, aroundWord, matchedRoomName)]
		
		if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentRoomPhrases):
			return ShowRoomInformationHelper()
			
		return SentenceNotRecognised()

	# Process the examine command on the object selected (running the pre-process script of course)
	return ProcessPlaceableObjectHelper(validObjects[0], adventureCommand)
&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;LOOK&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i10"&gt;&lt;ControlId&gt;bc7d6ddf-6dcc-9999-bef7-a08d18cd97dd&lt;/ControlId&gt;&lt;AliasList i:nil="true" /&gt;&lt;HelpText&gt;Open a container object.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;2ad31d83-8d64-43dd-8340-993b2e13c3bc&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The OPEN command allows the player to Open container objects.

originalCommandWord = ""

def ProcessPlaceableObjectHelper(objectToProcess):
	# Try the pre-process script for the current room and return its result
	preProcessResult = Preprocess(objectToProcess)
			
	if not preProcessResult:
		return False		

	return True
	
def OpenObjectHelper(adventureCommand):

	# Do we match any objects
	allObjects = AWApi.GetObjectsFromNames(adventureCommand.GetParametersWithoutStopWords())
	
	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, allObjects))
	
	if not UnknownWordsHelper(invalidObjects):
		return False
	
	# At this point we must be trying to open a real object
	objectToOpen = allObjects[0]
	
	objectOpenPhrases = []
	
	for objectName in [objectToOpen.WordThatMatchedThis, objectToOpen.Name]:
		# Process allowable phrases
		objectOpenPhrases.extend([ '{} {}'.format(originalCommandWord, objectName), 
		'{} {} {}'.format(originalCommandWord, theWord, objectName)])
	
	if not LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), objectOpenPhrases):
		return SentenceNotRecognised()
			
	if not AWApi.IsItemAvailableToExamine(objectToOpen):
		ConsoleApi.FormattedWrite("I don't see that here")
		return False
		
	if not type(objectToOpen) is Container:
		ConsoleApi.FormattedWrite("Try as you might it doesn't seem to open.")
		return False
	
	if objectToOpen.IsLocked:
		ConsoleApi.FormattedWrite("Try unlocking it first.")
		return False
		
	if objectToOpen.IsOpen:
		ShowAlreadyOpenMessage()
		return False
			
	objectToOpen.IsOpen = True
				
	# Give the chance for customisations to run and bail out of default actions.
	preProcessResult = Preprocess(objectToOpen)
			
	if not preProcessResult:
		return False

	ShowOpenMessage(objectToOpen)
		
	return True
		
def ShowAlreadyOpenMessage():
	ConsoleApi.FormattedWrite("There is no point, it's already open.")
	return
	
def ShowOpenMessage(objectToOpen):
	ConsoleApi.FormattedWrite("The {0} is now open.".format(objectToOpen.Name))
	return

	
def UnknownWordsHelper(invalidObjects):
	if any(invalidObjects):
		badObject = invalidObjects[0]
		ConsoleApi.FormattedWrite(DontKnowWord.format(badObject.Name.upper()))
		return False
		
	return True
	
def Execute(adventureCommand):
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()
	
	# No parameter supplied ask the question
	if adventureCommand.GetParametersWithoutStopWords().Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
	
	# We can only open a single object 
	if adventureCommand.GetParametersWithoutStopWords().Count == 1:
		return OpenObjectHelper(adventureCommand)
		
	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;OPEN&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i11"&gt;&lt;ControlId&gt;3c9335bf-e648-46b8-924d-58d90a02babf&lt;/ControlId&gt;&lt;AliasList&gt;Q&lt;/AliasList&gt;&lt;HelpText&gt;Quit the game.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;b7df1473-b40d-4b29-aab6-8175235e8134&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The QUIT command allows the player to exit the game.

from System.Globalization import CultureInfo

def Execute(adventureCommand):
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("Are you sure?")
		
		if ConsoleApi.ReadLine(AWApi.GameData.CommandPromptText).StartsWith("Y", True, CultureInfo.InvariantCulture):
			AWApi.QuitGame()
		else:
			ConsoleApi.FormattedWrite("Ok please carry on?")

		return False

	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;QUIT&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i12"&gt;&lt;ControlId&gt;ac7d81fa-6dcc-4c9e-bef7-a08d18cd37dd&lt;/ControlId&gt;&lt;AliasList&gt;SPRINT
JOG&lt;/AliasList&gt;&lt;HelpText&gt;Run in the specified direction.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;57052624-871d-4055-a360-dba85099399d&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The Run command allows the player to move around the Adventure World.
def Execute(adventureCommand):
	return ExecuteGenericMove(adventureCommand)	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;RUN&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i13"&gt;&lt;ControlId&gt;79367091-e460-42bf-9b24-a5ffed3b3480&lt;/ControlId&gt;&lt;AliasList&gt;SAV&lt;/AliasList&gt;&lt;HelpText&gt;Saves the current game with the specified name.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;101720e4-83e3-420f-8883-3231ece20b3e&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The SAVE command allows the player to save the current game.

def Execute(adventureCommand):
	if not ProcessFileOperationParametersForLength(adventureCommand):
		return False

	# One file name parameter supplied the current game can be saved with this game
	if adventureCommand.Parameters.Count == 1:
		FileToSave = adventureCommand.Parameters[0].OriginalWord
		AWApi.Save(FileToSave, AWApi.SerializeToString());
		ConsoleApi.FormattedWrite("Game saved successfully.")
		return True
	
	# More than one file name parameter specified
	ConsoleApi.FormattedWrite("You must specify only one name for the Save command.")

	return False&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;SAVE&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i14"&gt;&lt;ControlId&gt;c0826aac-33fa-4a33-a8be-435187c708ca&lt;/ControlId&gt;&lt;AliasList i:nil="true" /&gt;&lt;HelpText&gt;Show the current score.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;7ac6d150-f9d2-499a-b095-d78c8a383c61&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The SCORE command allows the player to check there current score

def Execute(adventureCommand):
	if adventureCommand.Parameters.Count &amp;gt; 0:
		return SentenceNotRecognised()
	
	ShowScoreHelper()
	return True	
	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;SCORE&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i15"&gt;&lt;ControlId&gt;b1663bd0-c540-4f30-929c-4e7b6fdcb0d0&lt;/ControlId&gt;&lt;AliasList&gt;PADDLE&lt;/AliasList&gt;&lt;HelpText&gt;Swim in the specified direction.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;377603f4-19d7-4d8e-94ff-188d16ccf462&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The Swim command allows the player to move around the Adventure World.
def Execute(adventureCommand):
	return ExecuteGenericMove(adventureCommand)
	
	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;SWIM&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i16"&gt;&lt;ControlId&gt;d4cdc8a9-61be-41f6-8b85-c9900d72ccd3&lt;/ControlId&gt;&lt;AliasList&gt;TURN&lt;/AliasList&gt;&lt;HelpText&gt;Switch a lightable object on or off.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;7f8d6f13-27f9-4471-9ebb-8cbfa9fc93a8&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The SWITCH command allows the player to switch things on
from System.Collections.Generic import List
from System import String

originalCommandWord = ""
	
def SetObjectToLightState(objectToLight, state):
	# Can't set to the same state
	if (objectToLight.IsLit and state == "on") or (not objectToLight.IsLit and state == "off"):
		ConsoleApi.FormattedWrite("The {0} is already {1}.".format(objectToLight.Name, state))
	else:
		ConsoleApi.FormattedWrite("Success!!")
		objectToLight.IsLit = True if state == "on" else False
	
		# Give the chance for customisations to run and bail out of default actions if required.
		preProcessResult = Preprocess(objectToLight)
			
		if not preProcessResult:
			return False
			
	return True
	
def Execute(adventureCommand):
	
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()
	
	# If the room is dark you certainly can't pick anything up
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite("You can't see anything!!")
		return True
		
	# No parameter supplied ask the question
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
		
	# Do we match any objects
	objects = AWApi.GetObjectsFromNames(adventureCommand.GetParametersWithoutStopWords(), 70.0, True)
	
	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	# Words we don't know
	if any(invalidObjects):
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(invalidObjects[0].Name.upper()))
		return False

	# Allowable phrases
	objectSwitchPhrases = []
	objectToSwitch = validObjects[0]
	
	for objectName in [objectToSwitch.WordThatMatchedThis, objectToSwitch.Name]:
		# Process allowable phrases
		objectSwitchPhrases.extend([ '{} {} {}'.format(originalCommandWord, objectName, onWord), 
		'{} {} {} {}'.format(originalCommandWord, theWord, objectName, onWord),
		'{} {} {}'.format(originalCommandWord, objectName, offWord), 
		'{} {} {} {}'.format(originalCommandWord, theWord, objectName, offWord)])

	if not LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), objectSwitchPhrases):
		return SentenceNotRecognised()
	
	# Nothing to light or the room is dark or the object is not visible
	# NOTE this behavior can be changed in the pre-process scripts to customise light behavior or
	# directly in the command if required.
	if validObjects.Count == 0 or not validObjects[0].Visible:
		ConsoleApi.FormattedWrite("You can't see that here.")
		return False
	
	if (validObjects.Count &amp;gt; 0 and not validObjects[0].IsLightSource):
		ConsoleApi.FormattedWrite("You can't do that the {}.".format(validObjects[0]))
		return False
		
	onOrOff = onWord if adventureCommand.GetWords().IndexOf(onWord.upper()) &amp;gt; 0 else offWord

	# We can attempt the light operation
	return SetObjectToLightState(validObjects[0], onOrOff)
	
	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;SWITCH&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i17"&gt;&lt;ControlId&gt;154b6bd8-8605-4e48-aea9-4be4c2f73855&lt;/ControlId&gt;&lt;AliasList&gt;GET
SNATCH
SEIZE
COLLECT
SNAG
OBTAIN
CLASP
GRASP
GATHER
PICK&lt;/AliasList&gt;&lt;HelpText&gt;Take object(s).&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;36a727f9-1e18-4d17-bb03-8dbde484f2e9&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The TAKE command allows the player to pick up objects.

# Loop through each object and process as appropriate
	
def ProcessObjectList(validObjects):
	
	for nextObject in validObjects:
	
		# Give the chance for customisations to run and bail out of default actions if required.
		preProcessResult = Preprocess(nextObject)
			
		if preProcessResult:
						
			itemIsAvailable = AWApi.IsItemAvailableToExamine(nextObject)
		
			if not itemIsAvailable:
				ConsoleApi.FormattedWrite("{0}: You can't see that here.".format(nextObject.Name))
			
			elif nextObject.Fixed:
				ConsoleApi.FormattedWrite("{0}: Cannot be moved.".format(nextObject.Name))
				
			elif nextObject.IsHeld:
				ConsoleApi.FormattedWrite("{0}: You already have it.".format(nextObject.Name))
			
			else:
				# Can we add this to our inventory
				if AWApi.GameData.EnableInventorySize and (AWApi.GetInventory().Count + 1) &amp;gt; AWApi.GameData.InventorySize:
					ConsoleApi.FormattedWrite("You can't carry anything else!!")
					return True
				
				# We can take the object
				AWApi.Take(nextObject)
					
				ConsoleApi.FormattedWrite("{0}: Taken.".format(nextObject.Name))
			
	return True
		
def Execute(adventureCommand):
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()

	# No parameter supplied ask the question
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
		
	# If the room is dark you certainly can't pick anything up
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite(IsDarkText)
		return True
		
	# Do we match any objects
	parametersToCheck = wildcardGameWordList if adventureCommand.Parameters[0].Word.lower() in everythingWords else adventureCommand.GetParametersWithoutStopWords()
	objects = AWApi.GetObjectsFromNames(parametersToCheck, 70.0, False)
	
	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	if any(invalidObjects):
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(invalidObjects[0].Name.upper()))
		return False
		
	# Valid Take Object phrases
	currentTakeObjectsPhrases = []
	
	# Build phrases for objects to be taken based on the word that matched them
	phrase1 = originalCommandWord + " "
	phrase2 = originalCommandWord + " "
	
	for i in range(len(validObjects)):
		actualAndWord = andWord if i &amp;lt; len(validObjects) - 1 else ""
		phrase1 = phrase1 + '{} {} '.format(validObjects[i].WordThatMatchedThis, actualAndWord)
		phrase2 = phrase2 + '{} {} {} '.format(theWord, validObjects[i].WordThatMatchedThis, actualAndWord)

	currentTakeObjectsPhrases.extend([ phrase1.strip(), phrase2.strip()])
	
	# Build phrases for objects to be taken based on their actual names
	phrase1 = originalCommandWord + " "
	phrase2 = originalCommandWord + " "
		
	for i in range(len(validObjects)):
		actualAndWord = andWord if i &amp;lt; len(validObjects) - 1 else ""
		phrase1 = '{} {} '.format(originalCommandWord, validObjects[i].Name, actualAndWord).strip()
		phrase2 = '{} {} {} '.format(originalCommandWord, theWord, validObjects[i].Name, actualAndWord).strip()
			
	currentTakeObjectsPhrases.extend([ phrase1.strip(), phrase2.strip()])
		
	# Add "all" words to support TAKE ALL
	for word in everythingWords:
		currentTakeObjectsPhrases.extend(['{} {}'.format(originalCommandWord, word)])
	
	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentTakeObjectsPhrases):
		# We can't take anything
		if validObjects.Count == 0:
			ConsoleApi.FormattedWrite("There isn't anything to take!")
			return True
	
		return ProcessObjectList(validObjects)
	
	return SentenceNotRecognised()	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;TAKE&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i18"&gt;&lt;ControlId&gt;aa791207-cccc-4720-be27-3f8bac40c821&lt;/ControlId&gt;&lt;AliasList&gt;SPEAK
CHAT&lt;/AliasList&gt;&lt;HelpText&gt;Talk to a none player character.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;6f72ee6f-43ac-4a50-b240-0c2fb92a1204&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The TALK command allows the player to interact with NPC's (Non-Player Characters).
from AdventureLandCore.Domain import ConversationStage

# Process and entire conversation
def ProcessConversation(npc):
	
	currentConversation = npc.GetCurrentConversation()
	
	# Run the start conversation script (this happens only once)
	if not LanguageApi.ExecuteConversationScript(currentConversation.ConversationPreprocessScript, npc, currentConversation, ConversationStage.Start):
		return False
		
	inConversation = True
	
	currentConversationText = currentConversation.ConversationText
	
	while (inConversation):
 		if currentConversationText != None:
 			
 			# Execute the conversation text script
 			if not LanguageApi.ExecuteConversationScript(currentConversationText.ConversationPreprocessScript, npc, currentConversationText, ConversationStage.NpcSpeaks):
				return False
 			
 			ConsoleApi.FormattedWrite(currentConversationText.Text)
  			ConsoleApi.WriteLine("")
  			
  			if (currentConversationText.ConversationResponses):
				nextResponse = ProcessConversationResponses(currentConversation.ConversationText.ConversationResponses, npc);
				if nextResponse &amp;lt;&amp;gt; None and nextResponse.ConversationText &amp;lt;&amp;gt; None:
					currentConversationText = nextResponse.ConversationText
				else:
					inConversation = False
			else:
				inConversation = False
		else:
			inConversation = False
			
	return True

def ProcessConversationResponses(responses, npc):

	if not responses:
		return False
		
	sortedResponses = sorted(responses, key=lambda x: x.SortOrder)
	
	for index in range(len(sortedResponses)):
	
		# Execute the conversation text script
 		if not LanguageApi.ExecuteConversationScript(sortedResponses[index].ConversationPreprocessScript, npc, sortedResponses[index], ConversationStage.PlayerResponds):
			return None
 			
		ConsoleApi.FormattedWrite('{}. {}'.format(index+1, sortedResponses[index].Response))
	
	escapeText = currentConversation = npc.GetCurrentConversation().EscapeText
	
	if escapeText:
		ConsoleApi.WriteLine("")
		ConsoleApi.FormattedWrite('({}){}'.format(escapeText[0], escapeText[1:]))
	
	ConsoleApi.WriteLine("")
	
	inputGood = False
	
	selectedResponse = 0
	
	while (not inputGood):
	
		input = ConsoleApi.ReadLine("&amp;gt;")
		
		if escapeText and input[0].lower() == escapeText[0].lower():
			return None
		
		if not input.isdigit() or int(input, 10) &amp;lt; 1 and int(input, 10) &amp;gt; len(sortedResponses):
			ConsoleApi.WriteLine("Not a valid response")
			inputGood = False
			
		inputGood = True
	
	selectedResponse = int(input, 10) - 1
		
	return responses[selectedResponse]

def Execute(adventureCommand):
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()

	# No parameter supplied ask the question
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("Who do you want to {0} to?".format(originalCommandWord))
		return False
		
	# If the room is dark you certainly can't see anyone to talk to
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite(IsDarkText)
		return True
		
	# Do we match any npcs
	parametersToCheck = wildcardGameWordList if adventureCommand.Parameters[0].Word.lower() in everythingWords else adventureCommand.GetParametersWithoutStopWords()
	npcs = AWApi.GetNpcsFromNames(parametersToCheck, 70.0, False)
	
	# Check for words we don't understand
	invalidNpcs = list(filter(lambda object: not object.IsValid, npcs))
	validNpcs = list(filter(lambda object: object.IsValid, npcs))
	
	if any(invalidNpcs):
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(invalidNpcs[0].Name.upper()))
		return False
		
	# You cannot talk to this object		
	if validNpcs.Count == 0 and invalidNpcs.Count == 0:
		ConsoleApi.FormattedWrite("You cannot talk to  \"{0}\".".format(parametersToCheck[0].OriginalWord.upper()))
		return False
		
	# Only one NPC at a time
	if validNpcs.Count &amp;gt; 1:
		ConsoleApi.FormattedWrite("Try talking to one person at a time.")
		return False
			
	targetNpc = validNpcs[0]
	
	# Valid Talk Object phrases
	currentTalkPhrases = []
	
	# Build phrases for Npc to be matched based on the word that matched them
	phrase1 = originalCommandWord + ' {} {} '.format(toWord, targetNpc.WordThatMatchedThis)
	phrase2 = originalCommandWord + ' {} {} {} '.format(toWord, theWord, targetNpc.WordThatMatchedThis)
	
	currentTalkPhrases.extend([ phrase1.strip(), phrase2.strip()])
	
	# Build phrases for objects to be dropped based on their actual names
	phrase1 = originalCommandWord + ' {} {} '.format(toWord, targetNpc.Name)
	phrase2 = originalCommandWord + ' {} {} {} '.format(toWord, theWord, targetNpc.Name)
			
	currentTalkPhrases.extend([ phrase1.strip(), phrase2.strip()])
			
	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentTalkPhrases):
	
		# Allow the NPC pre-process script to run
		preProcessResult = Preprocess(targetNpc)
		
		if preProcessResult == False:
			return False
			
		# No conversation set up
		if targetNpc.GetCurrentConversation() == None:
			ConsoleApi.FormattedWrite('The {} has nothing to say!'.format(targetNpc.WordThatMatchedThis))
			return True
		
		return ProcessConversation(targetNpc)
	
	return SentenceNotRecognised()	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;TALK&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i19"&gt;&lt;ControlId&gt;bc0920c7-ec1d-42e2-8759-c1f655bfe246&lt;/ControlId&gt;&lt;AliasList&gt;LOB
HURL
HEAVE
FLING&lt;/AliasList&gt;&lt;HelpText&gt;Throw an object, optionally in a particular direction.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;25680273-878d-48d7-ae5b-dff321a669fa&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The THROW command allows the player to throw objects around
from System.Collections.Generic import List
from System import String

import clr
clr.AddReference("System.Core")
import System
clr.ImportExtensions(System.Linq)

def ThrowItemThroughExit(objectToThrow, directionToThrow):

	# Check is the item is available to throw and run its script if so
	itemIsAvailable = AWApi.IsItemAvailableToExamine(objectToThrow)
	
	if not itemIsAvailable:
		ConsoleApi.FormattedWrite("{0}: You can't see that here.".format(objectToThrow.Name))
		return False
		
	elif not objectToThrow.IsHeld:
		ConsoleApi.FormattedWrite("{0}: You are not holding that.".format(objectToThrow.Name))
		return False
				
	if not directionToThrow.upper() in MoveValueLimits:
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(directionToThrow.upper()))
		return False
			
	exit = GetExitFromDirection(CurrentLocation, directionToThrow)

	# We can't throw this way
	if exit == None:
		ConsoleApi.FormattedWrite("I can't throw the {0} that way.".format(objectToThrow.Name))
		return False
		
	# We next check if the exit is locked (and not visible of course)
	if not CheckExitLocked(exit):
		return False
		
	# Finally we can perform the operation
	AWApi.ThrowToRoom(objectToThrow, exit.RoomName)

	# Give the chance for customisations to run and bail out of default actions if required.
	preProcessResult = Preprocess(exit)
			
	if not preProcessResult:
		return False
		
	ConsoleApi.FormattedWrite("You throw the {0} {1}.".format(objectToThrow.Name.upper(), directionToThrow.lower()))
	
	return True

def Execute(adventureCommand):
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()

	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
	
	# An allowable parameter is a direction so we must remove this from the list of objects before checking them
	objects = AWApi.GetObjectsFromNames(adventureCommand.GetParametersWithoutStopWords(List[String](MoveValueLimits)), 70.0, True)
	
	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	# Check for directions
	throwDirection = None
	
	if adventureCommand.GetParametersWithoutStopWords().Count &amp;gt; 1:
		# Only last word can be a direction
		directionList = List[String]()
		potentialThrowDirection = adventureCommand.GetParametersWithoutStopWords().Last().Word
	
		directionList.Add(potentialThrowDirection)
	
		unknownDirections = set(directionList).difference(set(MoveValueLimits))
		
		# Must specify a known direction
		if unknownDirections.Count == 0:
			throwDirection = potentialThrowDirection

	if any(invalidObjects):
		ConsoleApi.FormattedWrite(DontKnowWord.format(invalidObjects[0].Name.upper()))
		return False

	if validObjects.Count &amp;gt; 1:
		ConsoleApi.FormattedWrite("One thing at a time please!")
		return False
	
	if invalidObjects.Count + validObjects.Count == 0:
		ConsoleApi.FormattedWrite("I can't throw that!")
		return False
		
	# Valid Drop Object phrases
	currentThrowObjectsPhrases = []
	
	currentThrowObjectsPhrases.extend(['{} {}'.format(originalCommandWord, validObjects[0].WordThatMatchedThis)])
	currentThrowObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, theWord, validObjects[0].WordThatMatchedThis)])

	currentThrowObjectsPhrases.extend(['{} {}'.format(originalCommandWord, validObjects[0].Name)])
	currentThrowObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, theWord, validObjects[0].Name)])
	
	if throwDirection &amp;lt;&amp;gt; None:
		currentThrowObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, validObjects[0].WordThatMatchedThis, throwDirection)])
		currentThrowObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, validObjects[0].WordThatMatchedThis, throwDirection)])
		currentThrowObjectsPhrases.extend(['{} {} {} {} {}'.format(originalCommandWord, theWord, validObjects[0].WordThatMatchedThis, toWord, theWord, throwDirection)])
		
		currentThrowObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, validObjects[0].Name, throwDirection)])
		currentThrowObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, validObjects[0].Name, throwDirection)])
		currentThrowObjectsPhrases.extend(['{} {} {} {} {} {}'.format(originalCommandWord, theWord, validObjects[0].Name, toWord, theWord, throwDirection)])

	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentThrowObjectsPhrases):
		# We can't throw anything
		if validObjects.Count == 0:
			ConsoleApi.FormattedWrite("There isn't anything to throw!")
			return True
	
		objectToThrow = validObjects[0]
	
		if(throwDirection == None):
				# Same as drop in the room
				return ProcessObjectListForDrop(validObjects, "thrown")
		else:	
			# Otherwise we attempt to throw the item through the exit
			return ThrowItemThroughExit(objectToThrow, throwDirection)
		
	return SentenceNotRecognised()		&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;THROW&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i20"&gt;&lt;ControlId&gt;bc7d61fa-6dcc-9999-bef7-a08d18cd97dd&lt;/ControlId&gt;&lt;AliasList i:nil="true" /&gt;&lt;HelpText&gt;Unlock an object or an exit.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;d708b3ab-79e0-42ec-96d0-7c2ba2c90de9&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The UNLOCK command allows the player to unlock rooms and exit

def UnlockObjectHelper(objectToUnlock):
	
	if not AWApi.IsItemAvailableToExamine(objectToUnlock):
		ConsoleApi.FormattedWrite("I don't see that here.")
		return False
	
	if not type(objectToUnlock) is Container:
		ConsoleApi.FormattedWrite("Try as you might it can't be done")
		return False
		
	if not objectToUnlock.IsLocked:
		ShowAlreadyUnlockedMessage()
		return False
	
	# Give the chance for customisations to run and bail out of default actions.
	preProcessResult = Preprocess(objectToUnlock)
				
	if not preProcessResult:
		return False
	
	objectToUnlock.IsLocked = False

	ShowUnlockedMessage()
		
	return True

def UnlockExitHelper(directionToUnlock):

	# See if the exit exists
	exit = GetExitFromDirection(CurrentLocation, directionToUnlock)

	# We can't move this way
	if exit == None:
		ConsoleApi.FormattedWrite("I can't see anything over there.")
		return False
		
	# Already unlocked
	if not exit.IsLocked:
		ShowAlreadyUnlockedMessage()
		return False
				
	# Give the chance for customisations to run and bail out of default actions.
	preProcessResult = Preprocess(exit)
	
	if not preProcessResult:
		return False
		
	exit.IsLocked = False

	ShowUnlockedMessage()
	
	return True
		
def ShowAlreadyUnlockedMessage():
	ConsoleApi.FormattedWrite("There is no point, it's already unlocked.")
	return
	
def ShowUnlockedMessage():
	ConsoleApi.FormattedWrite("Its unlocked, well done!!")
	return
	
def UnknownDirectionsHelper(invalidDirections):
	if any(invalidDirections):
		badDirection = invalidDirections.pop()
		ConsoleApi.FormattedWrite(DontKnowWord.format(badDirection.upper()))
		return False
		
	return True
	
def UnknownWordsHelper(invalidObjects):
	if any(invalidObjects):
		badObject = invalidObjects[0]
		ConsoleApi.FormattedWrite(DontKnowWord.format(badObject.Name.upper()))
		return False
		
	return True
	
def Execute(adventureCommand):
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()

	# No parameter supplied ask the question
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
	
	unlockDirection = None
	objectToUnlock = None
	
	# Special case trying to open generic door or exit
	if ((adventureCommand.Parameters.Count == 1 and adventureCommand.Parameters[0].Word.lower() in exitWords)
	or (adventureCommand.Parameters.Count == 2 and adventureCommand.Parameters[0].Word.lower() == theWord
	and adventureCommand.Parameters[1].Word.lower() in exitWords)):
		unlockableExits = AWApi.GetCurrentLocation().GetUnlockableExits()
		
		if unlockableExits.Count == 1:
			return UnlockExitHelper(unlockableExits[0].Direction)
		elif unlockableExits.Count &amp;gt; 1:
			ConsoleApi.FormattedWrite("Which one?")
			return False
		else:
			ConsoleApi.FormattedWrite("There is nothing to unlock?")
			return False	
			
	if adventureCommand.GetParametersWithoutStopWords().Count &amp;gt; 1:
		directionList = List[String]()
		unlockDirection = adventureCommand.GetParametersWithoutStopWords()[1].Word
		directionList.Add(unlockDirection)
	
		unknownDirections = set(directionList).difference(set(MoveValueLimits))
	
		# Must specify a known direction
		if unknownDirections.Count &amp;gt; 0:
			ConsoleApi.FormattedWrite(DontKnowWord.format(unknownDirections.pop()))
			return False
	
	elif adventureCommand.GetParametersWithoutStopWords().Count &amp;gt; 0:
		objectList = List[GameWord]()
		objectList.Add(adventureCommand.GetParametersWithoutStopWords()[0])
		
		objects = AWApi.GetObjectsFromNames(objectList, 70.0, True)
	
		# Check for words we don't understand
		invalidObjects = list(filter(lambda object: not object.IsValid, objects))
		validObjects = list(filter(lambda object: object.IsValid, objects))
	
		if any(invalidObjects):
			ConsoleApi.FormattedWrite(DontKnowWord.format(invalidObjects[0].Name.upper()))
			return False

		objectToUnlock = validObjects[0]
		
	# Valid Unlock phrases
	currentUnlockObjectsPhrases = []
	
	if objectToUnlock &amp;lt;&amp;gt; None:
		currentUnlockObjectsPhrases.extend(['{} {}'.format(originalCommandWord, objectToUnlock.WordThatMatchedThis)])
		currentUnlockObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, theWord, objectToUnlock.WordThatMatchedThis)])

		currentUnlockObjectsPhrases.extend(['{} {}'.format(originalCommandWord, objectToUnlock.Name)])
		currentUnlockObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, theWord, objectToUnlock.Name)])
	
	elif unlockDirection &amp;lt;&amp;gt; None:
		for exitWord in exitWords:
			currentUnlockObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, exitWord, unlockDirection)])
			currentUnlockObjectsPhrases.extend(['{} {} {} {} {}'.format(originalCommandWord, exitWord, toWord, theWord, unlockDirection)])
			currentUnlockObjectsPhrases.extend(['{} {} {} {} {} {}'.format(originalCommandWord, theWord, exitWord, toWord, theWord, unlockDirection)])
			currentUnlockObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, exitWord, toWord, unlockDirection)])
			currentUnlockObjectsPhrases.extend(['{} {} {} {} {}'.format(originalCommandWord, theWord, exitWord, toWord, unlockDirection)])
			currentUnlockObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, exitWord, unlockDirection)])

	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentUnlockObjectsPhrases):
		# Are we unlocking an object or an exit
		if objectToUnlock &amp;lt;&amp;gt; None:
			# We can't unlock anything
			if validObjects.Count == 0:
				ConsoleApi.FormattedWrite("There isn't anything to unlock!")
				return True
			
			return UnlockObjectHelper(objectToUnlock)
		elif unlockDirection &amp;lt;&amp;gt; None:
			return UnlockExitHelper(unlockDirection)
		
	return SentenceNotRecognised()		&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;UNLOCK&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i21"&gt;&lt;ControlId&gt;3d932e34-a69d-4d64-ba02-812e0fe7fcf3&lt;/ControlId&gt;&lt;AliasList&gt;HANG
CHILL&lt;/AliasList&gt;&lt;HelpText&gt;Wait around for a bit.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;d88cb09f-d723-423b-b4b3-76568fbac1d5&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The WAIT command allows the player to wait around for a bit

def Execute(adventureCommand):
	if adventureCommand.Parameters.Count == 0:
		# Try the pre-process script for the current room and return its result
		preProcessResult = Preprocess(AWApi.GetCurrentLocation())
			
		if not preProcessResult:
			return False
			
		ConsoleApi.FormattedWrite("Time passes...Yawn...")
		return True

	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;WAIT&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i22"&gt;&lt;ControlId&gt;bc7d61fa-6dcc-4c9e-bef7-a08d18cd97dd&lt;/ControlId&gt;&lt;AliasList&gt;GO
MOVE
STEP&lt;/AliasList&gt;&lt;HelpText&gt;Walk in the specified direction.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList&gt;N
NORTH
S
SOUTH
E
EAST
W
WEST
SE
SOUTHEAST
SW
SOUTHWEST
NE
NORTHEAST
NW
NORTHWEST
U
UP
D
DOWN&lt;/OneWordSubstitutionList&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;59037aae-187d-4d0d-8f74-94f13a8a7abb&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# The Walk command allows the player to move around the Adventure World.
def Execute(adventureCommand):
	return ExecuteGenericMove(adventureCommand)
	
	&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;WALK&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i23"&gt;&lt;ControlId&gt;4dfb8a39-c5cb-416b-ba49-314ed3592820&lt;/ControlId&gt;&lt;AliasList&gt;BASH
THUMP
WALLOP&lt;/AliasList&gt;&lt;HelpText&gt;Try to Hit Something&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;false&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;fe00f7a5-8d62-4f2e-a73b-16874895ee2a&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureCommand):

	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()
	
	# No parameter supplied ask the question
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
	
	# If the room is dark you certainly can't hit anything
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite(IsDarkText)
		return True
		
	# Do we match any objects
	objects = AWApi.GetObjectsFromNames(adventureCommand.GetParametersWithoutStopWords())
	
	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	if any(invalidObjects):
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(invalidObjects[0].Name.upper()))
		return False
	
	# There must be two objects
	objectToHit = validObjects[0] if validObjects.Count &amp;gt;= 1 else None
	tool = validObjects[1] if validObjects.Count &amp;gt;= 2 else None
	
	# We can't hit anything
	if objectToHit == None:
		ConsoleApi.FormattedWrite("There isn't anything to {}!".format(originalCommandWord))
		return False
		
	# We need a tool
	if tool == None:
		ConsoleApi.FormattedWrite("You need something to use as a tool.")
		return False
		
	# We need a tool
	if tool.Name &amp;lt;&amp;gt; Hammer:
		ConsoleApi.FormattedWrite("You can't use the {} like that".format(tool.Name))
		return False

	# Valid hit Object phrases
	currentHitObjectsPhrases = []
	
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToHit.WordThatMatchedThis, withWord, tool.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {} {} {}'.format(originalCommandWord, theWord, objectToHit.WordThatMatchedThis, withWord, theWord, tool.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {} {}'.format(originalCommandWord, objectToHit.WordThatMatchedThis, withWord, theWord, tool.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {} {}'.format(originalCommandWord, theWord, objectToHit.WordThatMatchedThis, withWord, tool.WordThatMatchedThis)])

	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToHit.Name, withWord, tool.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {} {} {}'.format(originalCommandWord, theWord, objectToHit.Name, withWord, theWord, tool.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {} {}'.format(originalCommandWord, objectToHit.Name, withWord, theWord, tool.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {} {}'.format(originalCommandWord, theWord, objectToHit.Name, withWord, tool.Name)])

	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentHitObjectsPhrases):
	
		if not AWApi.DoIHaveTheObject(tool.Name):
			ConsoleApi.FormattedWrite("You are not holding that at the moment.")
			return False
		
		if not AWApi.IsItemAvailableToExamine(objectToHit):
			ConsoleApi.FormattedWrite("You can't see that at the moment.")
			return False
	
		if not Preprocess(objectToHit):
			return False
		
		if not Preprocess(tool):
			return False
			
		return True
			
	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;HIT&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i24"&gt;&lt;ControlId&gt;353f2448-65c6-46a7-9feb-bc751344d8cc&lt;/ControlId&gt;&lt;AliasList /&gt;&lt;HelpText&gt;Read a book, letter, notr or similar&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;true&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;4907b422-5dcd-4ded-8a78-4e1c5042f37d&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureCommand):
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()
	
	# No parameter supplied ask the question
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
	
	# If the room is dark you certainly can't read anything
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite(IsDarkText)
		return True
		
	# Do we match any objects
	objects = AWApi.GetObjectsFromNames(adventureCommand.GetParametersWithoutStopWords())
	
	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	if any(invalidObjects):
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(invalidObjects[0].Name.upper()))
		return False
		
	# We can only use one thing at a time.
	if validObjects.Count &amp;gt; 1:
		ConsoleApi.FormattedWrite("One thing at a time please!")
		return False
		
	# We can't use anything
	if validObjects.Count == 0:
		ConsoleApi.FormattedWrite("There isn't anything to read!")
		return False

	# Valid Use Object phrases
	currentUseObjectsPhrases = []
	
	currentUseObjectsPhrases.extend(['{} {}'.format(originalCommandWord, validObjects[0].WordThatMatchedThis)])
	currentUseObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, theWord, validObjects[0].WordThatMatchedThis)])

	currentUseObjectsPhrases.extend(['{} {}'.format(originalCommandWord, validObjects[0].Name)])
	currentUseObjectsPhrases.extend(['{} {} {}'.format(originalCommandWord, theWord, validObjects[0].Name)])
	
	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentUseObjectsPhrases):
	
		objectToUse = validObjects[0]
	
		itemIsAvailable = AWApi.IsItemAvailableToExamine(objectToUse)
		
		if not itemIsAvailable:
			ConsoleApi.FormattedWrite("You can't see the {0} here.".format(objectToUse.Name))
			return False
		
		if not objectToUse.IsHeld:
			container = AWApi.GetContainerForPlaceableObject(objectToUse)
			
			if container == None:
				ConsoleApi.FormattedWrite("You're not holding the {0}!".format(objectToUse.Name))
			else:
				ConsoleApi.FormattedWrite("Try taking it out of the {0}!".format(container.Name))
		
			return False
			
		# Run the pre-process script for the object, this will be where the interaction logic is.
		# To avoid the default code executing, handle all the logic in the pre-process routine for
		# the object and return false
		preProcessResult = Preprocess(objectToUse)
				
		# If there was no script run othen display a failure message
		if preProcessResult:
			ConsoleApi.FormattedWrite("Sorry you can't do that.".format(originalCommandWord, objectToUse.Name))
			return False
			
		return True
			
	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;READ&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;AdventureCommandMapping z:Id="i25"&gt;&lt;ControlId&gt;fc22cb06-251b-4b8a-89de-e97f6a1b77bb&lt;/ControlId&gt;&lt;AliasList&gt;PUT
INSERT
STICK&lt;/AliasList&gt;&lt;HelpText&gt;Try and place one object inside another.&lt;/HelpText&gt;&lt;IsBuiltInCommand&gt;false&lt;/IsBuiltInCommand&gt;&lt;IsEnabled&gt;true&lt;/IsEnabled&gt;&lt;OneWordSubstitutionList i:nil="true" /&gt;&lt;ScriptCommand xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;570a623f-1d5b-4466-9b38-0c2b2357e463&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureCommand):

	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()
	
	# No parameter supplied ask the question
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("What do you want to {0}?".format(originalCommandWord))
		return False
	
	# If the room is dark you certainly can't place anything
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite(IsDarkText)
		return True
		
	# Do we match any objects
	objects = AWApi.GetObjectsFromNames(adventureCommand.GetParametersWithoutStopWords())
	
	# Check for words we don't understand
	invalidObjects = list(filter(lambda object: not object.IsValid, objects))
	validObjects = list(filter(lambda object: object.IsValid, objects))
	
	if any(invalidObjects):
		ConsoleApi.FormattedWrite("I don't know the word \"{0}\".".format(invalidObjects[0].Name.upper()))
		return False
	
	# There must be two objects
	objectToPlace = validObjects[0] if validObjects.Count &amp;gt;= 1 else None
	objectToBePlaced = validObjects[1] if validObjects.Count &amp;gt;= 2 else None
	
	# We can't place anything
	if objectToPlace == None:
		ConsoleApi.FormattedWrite("{} what?".format(originalCommandWord))
		return False
		
	# We need a something to be places
	if objectToBePlaced == None:
		ConsoleApi.FormattedWrite("Where do you want to {} it?".format(originalCommandWord))
		return False
		
	# We need the right thing
	if objectToPlace.Name &amp;lt;&amp;gt; Battery:
		ConsoleApi.FormattedWrite("You can't use the {} like that".format(objectToBePlaced.Name))
		return False

	# Valid hit Object phrases
	currentHitObjectsPhrases = []
	
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, objectToPlace.WordThatMatchedThis, inWord, theWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.WordThatMatchedThis, inWord, theWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.WordThatMatchedThis, inWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, objectToPlace.WordThatMatchedThis, insideWord, theWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.WordThatMatchedThis, insideWord, theWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.WordThatMatchedThis, insideWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, objectToPlace.WordThatMatchedThis, intoWord, theWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.WordThatMatchedThis, intoWord, theWord, objectToBePlaced.WordThatMatchedThis)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.WordThatMatchedThis, intoWord, objectToBePlaced.WordThatMatchedThis)])

	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, objectToPlace.Name, inWord, theWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.Name, inWord, theWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.Name, inWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, objectToPlace.Name, insideWord, theWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.Name, insideWord, theWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.Name, insideWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, theWord, objectToPlace.Name, intoWord, theWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.Name, intoWord, theWord, objectToBePlaced.Name)])
	currentHitObjectsPhrases.extend(['{} {} {} {}'.format(originalCommandWord, objectToPlace.Name, intoWord, objectToBePlaced.Name)])

	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), currentHitObjectsPhrases):
	
		if not AWApi.DoIHaveTheObject(objectToPlace.Name):
			ConsoleApi.FormattedWrite("You are not holding that at the moment.")
			return False
		
		if not AWApi.IsItemAvailableToExamine(objectToBePlaced):
			ConsoleApi.FormattedWrite("You can't see that at the moment.")
			return False
			
		if not Preprocess(objectToPlace):
			return False
		
		if not Preprocess(objectToBePlaced):
			return False
			
		return True
			
	return SentenceNotRecognised()&lt;/d4p1:Source&gt;&lt;/ScriptCommand&gt;&lt;VerbName&gt;PLACE&lt;/VerbName&gt;&lt;/AdventureCommandMapping&gt;&lt;/AdventureCommandMappings&gt;&lt;AnotherGameText&gt;Would you like another game?&lt;/AnotherGameText&gt;&lt;AnotherGameYesResponse&gt;Y&lt;/AnotherGameYesResponse&gt;&lt;CommandPromptText&gt;Ready&amp;gt;&lt;/CommandPromptText&gt;&lt;CommonCode xmlns:d2p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d2p1:Id&gt;aa154e7e-a5c0-4c18-8bff-7c90793a5218&lt;/d2p1:Id&gt;&lt;d2p1:Source&gt;# This script contains common code routines for all scripts in your game. It ships with code that is used by the built in commands.
# You can add your own routines or change behaviour of existing commands. Please note if you change the existing commands incorrectly they
# will likely not function correctly.
from AdventureLandCore.Domain import GameWord
from System.Collections.Generic import List
from AdventureLandCore.Domain import Container
from System import Char
from System import String
from System import Object
from System import Linq 
from AdventureLandCore.Domain import ParsedAdventureCommand
from System import Environment
from AdventureLandCore.Domain import WordType
from System.IO import Path
from AdventureLandCore.Domain import GlobalConstants

import clr
clr.AddReference("System.Core")
import System
clr.ImportExtensions(System.Linq)

originalCommandWord = ""
	
# some word constants
lookWord = "look"
roomWord = "room"
aroundWord = "around"
theWord = "the"
aWord = "a"
atWord = "at"
toWord = "to"
examineWord = "examine"
inspectWord = "inspect"
andWord = "and"
onWord = "on"
offWord = "off"
withWord = "with"
inWord = "in"
insideWord = "inside"
intoWord = "into"

exitWords = ["exit", "door"]
everythingWords = ["everything", "all"]

wildcardGameWordList = List[GameWord]()
wildcardGameWord = GameWord()
wildcardGameWord.Word = "*"
wildcardGameWordList.Add(wildcardGameWord)

CurrentLocation = AWApi.GetCurrentLocation()
FileNameMinLength = 3
FileNameMustBeCorrectLength = 'The filename must be at least {} characters.'
ThereIsNoFile = "Sorry I can't find that game."
InvalidGameVersion = "I cannot load this it does not match the current game version."
DontKnowWord = "I don't know the word \"{0}\"."
IsDarkText = "You can't see anything."

# Defines the limits of directions for move commands
MoveValueLimits = AWApi.GetMoveLimits()

def GetExitFromDirection(room, direction):
	# Apply abbreviations
	mappedDirection = AWApi.GetDirectionFromAbbreviation(direction)
	
	if not mappedDirection == None:
    	 direction = mappedDirection
	
	return AWApi.GetExitFromName(CurrentLocation.Name, direction)

def IsNullOrWhiteSpace(source):
	if not source:
		return True
	elif not source.strip():
		return True
	else:
		return False

def NameIsCorrectLength(source):
	if len(source) &amp;lt; FileNameMinLength:
		return False
	else:
		return True
		
def SentenceNotRecognised():
	ConsoleApi.FormattedWrite("That sentence isn't one I recognise.")
	
	return False
	
def Preprocess(targetObject):
 	return LanguageApi.ExecuteObjectScript(targetObject.PreProcessScript, targetObject, AWApi.LastExecutedCommand) 
 	
def ProcessFileOperationParametersForLength(adventureCommand):
	# One parameter not of the correct length specified
	if adventureCommand.Parameters.Count == 0 or (adventureCommand.Parameters.Count == 1 and not NameIsCorrectLength(adventureCommand.Parameters[0].OriginalWord)):
		ConsoleApi.FormattedWrite(FileNameMustBeCorrectLength.format(FileNameMinLength))
		return False
		
	return True
	
def NotNone(s,d):
    if s is None:
        return d
    else:
        return s
 
# This function is used to show the current score, both by the built-in score command and automatically when the game finishes.
# Change it here if you want to customise it
def ShowScoreHelper():
	if AWApi.GameData.EnableScore:
		ConsoleApi.FormattedWrite("Current Score is {0} out of {1}.".format(AWApi.GameData.CurrentScore, AWApi.GameData.MaximumScore))
	
	return
	
# Executes the specified move checking against the various allowable phrases
def ProcessTheMoveHelper(adventureCommand):
	
	nextMoveDirection = adventureCommand.Parameters[0].OriginalWord
	
	exit = GetExitFromDirection(CurrentLocation, nextMoveDirection)

	# We can't move this way
	if exit == None:
		ConsoleApi.FormattedWrite("I can't {0} {1}".format(originalCommandWord.lower(), nextMoveDirection))
		return False
		
	# We next check if the exit is locked (and not visible of course)
	if not CheckExitLocked(exit):
		return False
	
	originalCommand = adventureCommand.ParsedCommand.Word.upper()

	# We next check if the move type is supported through this exit
	canWalk = (exit.CanWalk and originalCommand== "WALK")
	canRun = (exit.CanRun and originalCommand == "RUN")
	canCrawl = (exit.CanCrawl and originalCommand == "CRAWL")
	canSwim = (exit.CanSwim and originalCommand == "SWIM")

	if not canWalk and not canRun and not canCrawl and not canSwim:
		ConsoleApi.FormattedWrite("Sorry you cannot {0} this way.".format(originalCommandWord))
		return False
		
	# Finally we can do the move
	AWApi.SetCurrentLocation(AWApi.GetRoomFromName(exit.RoomName))
			   	
	# Give the chance for customisations to run and bail out of default actions.
	preProcessResult = Preprocess(exit)
		
	if not preProcessResult:
		return False
		
	# Describe the exit if this feature toggle is enabled
	if AWApi.GameData.EnableExitDescriptions:
		ConsoleApi.FormattedWrite(exit.CurrentDescription)

	return True
	
# Peforms a generic Move operation, used by SWIM, RUN, WALK and CRAWL. Can be modified by an Exit pre-processing script
# to change the action depending on Move type. For example player can be made to SWIM a river.
def ExecuteGenericMove(adventureCommand):
	global originalCommandWord
	
	originalCommandWord = adventureCommand.ParsedCommand.OriginalWord.upper()

	# If the room is dark you certainly can't see the exits
	if CurrentLocation.IsDark:
		ConsoleApi.FormattedWrite("You can't see any exits!!")
		return False
		
	# Must specify a direction to move
	if adventureCommand.Parameters.Count == 0:
		ConsoleApi.FormattedWrite("Where do you want to {0} to?".format(originalCommandWord))
		return False
		
	# Must specify a known direction
	unknownItems = set(adventureCommand.GetOriginalWordsWithoutStopWords()).difference(set(MoveValueLimits))
	
	if unknownItems.Count &amp;gt; 0:
		ConsoleApi.FormattedWrite(DontKnowWord.format(unknownItems.pop()))
		return False

	# If we are in the current room we can process the sentence as the current room
	movePhrases = [ '{} {}'.format(originalCommandWord, adventureCommand.Parameters[0].OriginalWord)]
	
	if LanguageApi.CheckSentenceAgainstList(adventureCommand.JoinOriginalWordAndParameters(), movePhrases):
			return ProcessTheMoveHelper(adventureCommand)
	
	return SentenceNotRecognised()

def CheckExitLocked(exit):
	if exit.IsLocked and exit.Visible:
		ConsoleApi.FormattedWrite("Sorry the exit is locked.")
		return False

	return True

# Removed items from inventory one by one (can be THROW or DROP for example)
def ProcessObjectListForDrop(objectsToLeave, verb):
	for nextObject in objectsToLeave:
		itemIsAvailable = AWApi.IsItemAvailableToExamine(nextObject)
		
		if not itemIsAvailable or not nextObject.IsHeld:
			ConsoleApi.FormattedWrite("{0}: You are not holding that.".format(nextObject.Name))
		
		else:
			AWApi.Drop(nextObject)
			
			# Give the chance for customisations to run and bail out of default actions if required.
			preProcessResult = Preprocess(nextObject)
			
			if not preProcessResult:
				return False
				
			ConsoleApi.FormattedWrite("{0}: {1}.".format(nextObject.Name, verb))
		
	return True

# THE FOLLOWING SCRIPTS ARE USED BY THE DEFAULT LANGUAGE PROCESSOR - IF YOU REMOVE IT WILL STOP WORKING
# YOU CAN WRITE YOUR OWN SIMPLY BY REPLACING THE CODE IN PROCESS INPUT.
# IT IS PASSED A STRING CONTAINING THE LAST TEXT INPUT BY THE USER. IT MUST PROCESS IT AND RETURN THE 
# CORRECT ParsedAdventureCommand

def MoveAutoFollowNpcs():

	for npc in AWApi.GetAllAutoFollowNpcs():
		npc.Parent = AWApi.GetCurrentLocation()
		
	return
	
def ProcessInput(playerInputText):

	cleanedPlayerInputText = Clean(playerInputText)
	
	tokenList = Tokenise(cleanedPlayerInputText);
	    
	return CreateCommandFromSentence(tokenList, playerInputText)

def CreateCommandFromSentence(input, playerInputText):
	newParsedAdventureCommand = ParsedAdventureCommand();
	
	# Handle some simple commands directly
	if input.Count &amp;gt; 0:
		if ShowDebugInformation(input[0]) or ClearScreen(input[0]) or ControlLogging(playerInputText):
			return newParsedAdventureCommand
    
	adventureCommand = ConvertInputToCommand(input)
 
 	if (adventureCommand.IsValid):
 		newParsedAdventureCommand = adventureCommand
	else:
		ConsoleApi.FormattedWrite(adventureCommand.ErrorMessage)
              
	return newParsedAdventureCommand

def ConvertInputToCommand(inputTokens):
	# Firstly convert the sentence, represented by the list of words in the input. 
	# We can use an Api call to do this
	outputTokens = LanguageApi.ConvertSentence(inputTokens)
	
	# We can now convert this list of word tokens into a command and check it for validity
	return ConvertTokensToCommand(outputTokens)
    
def ConvertTokensToCommand(tokens):
	
	commandTypes = [WordType.Command, WordType.ReplacedCommand]

	parsedAdventureCommand = ParsedAdventureCommand()
	parsedAdventureCommand.IsValid = False
	
	commandCount = sum(1 for token in tokens if token.Type in commandTypes)

	# Check for validity
	if tokens.Count == 0:
		parsedAdventureCommand.ErrorMessage = "Pardon?"
	elif commandCount == 0:
		parsedAdventureCommand.ErrorMessage = "That sentence has no action I recognise.";
	elif (commandCount &amp;gt; 1 or (not tokens.First().Type in commandTypes) and not tokens.Last().Type in commandTypes):
		firstToken = tokens.First(lambda token: token.Type in commandTypes).OriginalWord.upper()
		parsedAdventureCommand.ErrorMessage = "You used the word '{0}' in a way that I don't understand.".format(firstToken)
	else:
		parsedAdventureCommand.IsValid = True
	
	for token in tokens:
		if token.Type in commandTypes:
			parsedAdventureCommand.ParsedCommand = token
			parsedAdventureCommand.CommandMapping = AWApi.Configuration.CommandMappings.First(lambda command: command.VerbName.upper() == token.Word.upper())
 		else:
 			parsedAdventureCommand.Parameters.Add(token)
                    
	return parsedAdventureCommand;
	

def ClearScreen(input):
	if input.upper() == "CLS":
		ConsoleApi.ClearScreen()
		return True

	return False

def ShowDebugInformation(input):
	if input.upper() == "DEBUG" and AWApi.IsDebugEnabled():
		ConsoleApi.WriteLine("ENVIRONMENT INFO:" + Environment.NewLine)
		ConsoleApi.WriteLine("Current Directory: " + Environment.CurrentDirectory)
		ConsoleApi.WriteLine("Save Game Directory: " + Path.Combine(Environment.CurrentDirectory, GlobalConstants.SaveGameDirectory))
		ConsoleApi.WriteLine("Path to game file: " + AWApi.Configuration.FullFilePath)
		ConsoleApi.WriteLine("Game Name: " + AWApi.Configuration.GameName)
		ConsoleApi.WriteLine("Start Room: " + AWApi.Configuration.StartRoom)
		ConsoleApi.WriteLine("Current Room: " + AWApi.GetCurrentLocation().Name)
		return True

	return False

def ControlLogging(playerInputText):
	input = playerInputText.split(' ', 1)

	if input[0].upper() == "LOGOFF" and AWApi.IsDebugEnabled():
		ConsoleApi.TurnLoggingOff();
		return True

	if input[0].upper() == "LOGON" and AWApi.IsDebugEnabled():
		if len(input) == 1:
			ConsoleApi.WriteLine("You must specify a file to start the logger")
			return True

		ConsoleApi.TurnLoggingOn(input[1]);
		return True

	return False

def Tokenise(sentence):
	return sentence.split() if sentence else List[String]()
        
def Clean(playerInputText):
	return StripPunctuation(playerInputText, True) if playerInputText else ""

def StripPunctuation(playerInputText, preserveQuotes):
	source = ""
	
	for chr in playerInputText:
		 if not Char.IsPunctuation(chr) or (preserveQuotes and chr == '"'):
		 	source += chr
    	
	return source
	
# Keyboard virtual keycodes
LBUTTON = 1
RBUTTON = 2
CANCEL = 3
MBUTTON = 4
XBUTTON1 = 5
XBUTTON2 = 6
BACK = 8
TAB = 9
CLEAR = 12
RETURN = 13 
SHIFT = 16
CONTROL = 17
MENU = 18
PAUSE = 19
CAPITAL = 20
HANGEUL = 21
HANGUL = 21 
KANA = 21
JUNJA = 23
FINAL = 24
HANJA = 25
KANJI = 25
ESCAPE = 27
CONVERT = 28
NONCONVERT = 29
ACCEPT = 30
MODECHANGE = 31
SPACE = 32
PRIOR = 33
NEXT = 34
END = 35
HOME = 36
LEFT = 37
UP = 38
RIGHT = 39
DOWN = 40
SELECT = 41
PRINT = 42
EXECUTE = 43
SNAPSHOT = 44
INSERT = 45
DELETE = 46
HELP = 47
VK_0 = 48
VK_1 = 49
VK_2 = 50
VK_3 = 51
VK_4 = 52
VK_5 = 53
VK_6 = 54
VK_7 = 55
VK_8 = 56
VK_9 = 57
VK_A = 65
VK_B = 66
VK_C = 67
VK_D = 68
VK_E = 69
VK_F = 70
VK_G = 71
VK_H = 72
VK_I = 73
VK_J = 74
VK_K = 75
VK_L = 76
VK_M = 77
VK_N = 78
VK_O = 79
VK_P = 80
VK_Q = 81
VK_R = 82
VK_S = 83
VK_T = 84
VK_U = 85
VK_V = 86
VK_W = 87
VK_X = 88
VK_Y = 89
VK_Z = 90
LWIN = 91
RWIN = 92
APPS = 93
SLEEP = 95
NUMPAD0 = 96
NUMPAD1 = 97
NUMPAD2 = 98
NUMPAD3 = 99
NUMPAD4 = 100
NUMPAD5 = 101
NUMPAD6 = 102
NUMPAD7 = 103
NUMPAD8 = 104
NUMPAD9 = 105
MULTIPLY = 106
ADD = 107
SEPARATOR = 108
SUBTRACT = 109
DECIMAL = 110
DIVIDE = 111
F1 = 112
F2 = 113
F3 = 114
F4 = 115
F5 = 116
F6 = 117
F7 = 118
F8 = 119
F9 = 120
F10 = 121
F11 = 122
F12 = 123
F13 = 124
F14 = 125
F15 = 126
F16 = 127
F17 = 128
F18 = 129
F19 = 130
F20 = 131
F21 = 132
F22 = 133
F23 = 134
F24 = 135
NUMLOCK = 144
SCROLL = 145
LSHIFT = 160
RSHIFT = 161
LCONTROL = 162
RCONTROL = 163
LMENU = 164
RMENU = 165
BROWSER_BACK = 166
BROWSER_FORWARD = 167
BROWSER_REFRESH = 168
BROWSER_STOP = 169
BROWSER_SEARCH = 170
BROWSER_FAVORITES = 171
BROWSER_HOME = 172
VOLUME_MUTE = 173
VOLUME_DOWN = 174
VOLUME_UP = 175
MEDIA_NEXT_TRACK = 176
MEDIA_PREV_TRACK = 177
MEDIA_STOP = 178
MEDIA_PLAY_PAUSE = 179
LAUNCH_MAIL = 180
LAUNCH_MEDIA_SELECT = 181
LAUNCH_APP1 = 182
LAUNCH_APP2 = 183
OEM_1 = 186
OEM_PLUS = 187
OEM_COMMA = 188
OEM_MINUS = 189
OEM_PERIOD = 190
OEM_2 = 191
OEM_3 = 192
OEM_4 = 219
OEM_5 = 220
OEM_6 = 221
OEM_7 = 222
OEM_8 = 223
OEM_102 = 226
PROCESSKEY = 229
PACKET = 231
ATTN = 246
CRSEL = 247
EXSEL = 248
EREOF = 249
PLAY = 250
ZOOM = 251
NONAME = 252
PA1 = 253
M_CLEAR = 254
&lt;/d2p1:Source&gt;&lt;/CommonCode&gt;&lt;DirectionMappings xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;3&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i26"&gt;&lt;d4p1:Abbreviation&gt;N&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;NORTH&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;7&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i27"&gt;&lt;d4p1:Abbreviation&gt;S&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;SOUTH&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;1&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i28"&gt;&lt;d4p1:Abbreviation&gt;E&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;EAST&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;5&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i29"&gt;&lt;d4p1:Abbreviation&gt;W&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;WEST&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;8&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i30"&gt;&lt;d4p1:Abbreviation&gt;SE&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;SOUTHEAST&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;6&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i31"&gt;&lt;d4p1:Abbreviation&gt;SW&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;SOUTHWEST&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;2&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i32"&gt;&lt;d4p1:Abbreviation&gt;NE&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;NORTHEAST&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;4&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i33"&gt;&lt;d4p1:Abbreviation&gt;NW&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;NORTHWEST&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;9&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i34"&gt;&lt;d4p1:Abbreviation&gt;U&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;UP&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;d2p1:Key&gt;10&lt;/d2p1:Key&gt;&lt;d2p1:Value xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain" z:Id="i35"&gt;&lt;d4p1:Abbreviation&gt;D&lt;/d4p1:Abbreviation&gt;&lt;d4p1:Text&gt;DOWN&lt;/d4p1:Text&gt;&lt;/d2p1:Value&gt;&lt;/d2p1:KeyValueOfintDirectionz50XgxK_P&gt;&lt;/DirectionMappings&gt;&lt;EnableDebug&gt;true&lt;/EnableDebug&gt;&lt;EnableExitDescriptions&gt;false&lt;/EnableExitDescriptions&gt;&lt;EnableInventorySize&gt;true&lt;/EnableInventorySize&gt;&lt;EnablePlayerLost&gt;true&lt;/EnablePlayerLost&gt;&lt;EnableScore&gt;false&lt;/EnableScore&gt;&lt;EnableShowItemsInRoom&gt;true&lt;/EnableShowItemsInRoom&gt;&lt;EnableTitles&gt;false&lt;/EnableTitles&gt;&lt;Exits&gt;&lt;Exit z:Id="i36"&gt;&lt;ControlId&gt;fce1216f-e4d7-4a61-a3b7-d6adcdccb8a3&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;de86caf6-d117-447c-901c-53c9d5596616&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;EAST&lt;/Direction&gt;&lt;FromRoom z:Id="i37"&gt;&lt;ControlId&gt;121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a&lt;/ControlId&gt;&lt;BaseName&gt;Corridor&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;You are standing in the middle of a long corridor, running east to west.

You can see:&lt;/d5p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;894bdc0e-4f49-4a99-80d4-fba5f9ca47b8&lt;/d5p1:Id&gt;&lt;d5p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/FromRoom&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Id="i38"&gt;&lt;ControlId&gt;0bd3fe93-4d28-4418-b708-f97289624ecd&lt;/ControlId&gt;&lt;BaseName&gt;East Corridor&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;This is the East end of the corridor. At it's end there is a steel door with no visible means of opening it.&lt;/d5p1:string&gt;&lt;d5p1:string&gt;This is the East of the corridor. At it's end there is a steel door that is now standing wide open.

You can see:&lt;/d5p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;b116e80e-cd28-4378-85f9-98f23ac5a86d&lt;/d5p1:Id&gt;&lt;d5p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/ToRoom&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i39"&gt;&lt;ControlId&gt;f0669b6a-aeda-4f9b-9d6a-ea4b2a041c24&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;fa2ee476-5a3a-49c9-8710-10f5b23c925d&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):
	
	if adventureCommand.CommandMapping.VerbName == "UNLOCK" and adventureObject.IsLocked:
		ConsoleApi.FormattedWrite("You can't open this door yourself.")
		return False
		
	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;EAST&lt;/Direction&gt;&lt;FromRoom z:Ref="i38" /&gt;&lt;IsLocked&gt;true&lt;/IsLocked&gt;&lt;ToRoom z:Id="i40"&gt;&lt;ControlId&gt;d5e5f953-6585-4ca6-aa1f-bd4faf71a65b&lt;/ControlId&gt;&lt;BaseName&gt;Kitchen&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;You are standing in a large kitchen. To the South you can see another door, back to the West is the corrider.

You can see:&lt;/d5p1:string&gt;&lt;d5p1:string /&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;60717eab-9e3c-4c4f-9652-5d451a847f6a&lt;/d5p1:Id&gt;&lt;d5p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/ToRoom&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i41"&gt;&lt;ControlId&gt;70632d7d-28b0-4bc4-80e4-8e06f0622db7&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;16ad65df-abc5-40c0-8d7e-dab426c006fd&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;WEST&lt;/Direction&gt;&lt;FromRoom z:Ref="i38" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Ref="i37" /&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i42"&gt;&lt;ControlId&gt;652bacd0-5bfa-44f5-b968-4a8e9e2f03f9&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;19a28945-0e3b-4c91-a6d1-5a8fadb68f2a&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;WEST&lt;/Direction&gt;&lt;FromRoom z:Ref="i40" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Ref="i38" /&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i43"&gt;&lt;ControlId&gt;3e0eacba-9f9d-48de-9edd-526b06298ffd&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;c276e778-205f-4207-9a53-aba3be5fc29c&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):
	
	if adventureCommand.CommandMapping.VerbName == "UNLOCK" and adventureObject.IsLocked:
		ConsoleApi.FormattedWrite("If you have the code you can type it on the keypad.")
		code = ConsoleApi.ReadAlphaNumericString(4, "?" )
		Console.WriteLine()
	
		if code == AWApi.GetVariable("jailDoorCode"):
			ConsoleApi.FormattedWrite("The keypad flashes green and with a whoosh of hydraulic levers the door slides smoothly open.")
			adventureObject.IsLocked = False
			AWApi.GetRoomFromName(JailCell).CurrentDescriptionIndex = 2
		else:
			ConsoleApi.FormattedWrite("The keypad flashes red, that is clearly the wrong code.")
			
		return False
		
	return True &lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;NORTH&lt;/Direction&gt;&lt;FromRoom z:Id="i44"&gt;&lt;ControlId&gt;57055445-1e44-4e67-99c4-0ada955b726d&lt;/ControlId&gt;&lt;BaseName&gt;Jail Cell&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;You are in a small jail cell about 6 foot square. Three walls are made of concrete and one to the South is made of metal bars. There is a door in the bars but it is seems to be locked tight. 

Outside the cell to the North is a corridor that runs from east to west. Through the bars you can see a digital clock it is counting down in seconds the time you have left.

You can see:
Through the bars and underneath the clock is a Prison Guard's jacket hanging on a peg.&lt;/d5p1:string&gt;&lt;d5p1:string&gt;You are in a small jail cell about 6 foot square. Three walls are made of concrete and one to the South is made of metal bars. There is a door in the bars but it is seems to be locked tight. 

Outside the cell to the North is a corridor that runs from east to west. Through the bars you can see a digital clock it is counting down in seconds the time you have left.

You can see:
&lt;/d5p1:string&gt;&lt;d5p1:string&gt;You in in a small jail cell about 6 foot square. Three walls are made of featureless concrete and one to the South is made of metal bars. There is a door in the bars and it is standing open. 

Outside the cell to the North is a corridor that runs from east to west. Through the bars you can see a digital clock it is counting down in seconds the time you have left.

You can see:
&lt;/d5p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;a89f3d90-f01f-45eb-9b50-6c44434ae76b&lt;/d5p1:Id&gt;&lt;d5p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/FromRoom&gt;&lt;IsLocked&gt;true&lt;/IsLocked&gt;&lt;ToRoom z:Ref="i37" /&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i45"&gt;&lt;ControlId&gt;21f437cb-b75d-42ad-b6ad-368525e4a885&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;c6b61490-5eea-4a37-acdd-166352de405d&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;SOUTH&lt;/Direction&gt;&lt;FromRoom z:Ref="i37" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Ref="i44" /&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i46"&gt;&lt;ControlId&gt;445e8a80-000c-4708-b2e3-65623c5f632c&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;28413e54-ac7c-4635-bef9-069f94982563&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;WEST&lt;/Direction&gt;&lt;FromRoom z:Ref="i37" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Id="i47"&gt;&lt;ControlId&gt;b4386267-8e76-4a74-a4b3-c524d614652c&lt;/ControlId&gt;&lt;BaseName&gt;West Corridor&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;This is the West of the corridor, it is featureless with smooth white walls.  At the end of the corridor to the South there is a door. It has not obvious means for opening it.

You can see:&lt;/d5p1:string&gt;&lt;d5p1:string&gt;This is the West of the corridor, it is featureless with smooth white walls.  At the end of the corridor to the South there is an opening leading to a spiral staircase.

You can see:&lt;/d5p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;4891b0b6-ec05-4cc3-9878-374d510624f8&lt;/d5p1:Id&gt;&lt;d5p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/ToRoom&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i48"&gt;&lt;ControlId&gt;3fe0e19c-eac8-4391-b545-d8c31b7e36ac&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;0f20c668-3f67-4895-9e7d-54fdae1aaab1&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;EAST&lt;/Direction&gt;&lt;FromRoom z:Ref="i47" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Ref="i37" /&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i49"&gt;&lt;ControlId&gt;d4c524a1-f652-459d-81e9-8a2cee5cfc35&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;2d26a2ae-cb29-44e2-9997-86420f146f29&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;SOUTH&lt;/Direction&gt;&lt;FromRoom z:Ref="i47" /&gt;&lt;IsLocked&gt;true&lt;/IsLocked&gt;&lt;ToRoom z:Id="i50"&gt;&lt;ControlId&gt;86899a2e-6f5a-4855-95eb-e6544b37c047&lt;/ControlId&gt;&lt;BaseName&gt;Spiral Stairs&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;A spiral staircase that goes upwards as far as you can see.&lt;/d5p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;4e2f52d3-78e2-4d20-a4e4-15549e2c770c&lt;/d5p1:Id&gt;&lt;d5p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/ToRoom&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i51"&gt;&lt;ControlId&gt;80421d26-c039-46cb-9eaa-58e544425886&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;476796a1-6cdd-40ca-8753-772eb4ed0869&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;NORTH&lt;/Direction&gt;&lt;FromRoom z:Ref="i50" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Ref="i47" /&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i52"&gt;&lt;ControlId&gt;65329a31-961a-4beb-9aa2-9c3c283d3788&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;7ed8b512-b673-4c6d-8d7e-8e2fd1c058f9&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;SOUTH&lt;/Direction&gt;&lt;FromRoom z:Ref="i40" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Id="i53"&gt;&lt;ControlId&gt;bf8439dd-7efc-4c82-85f4-7a9804465f4b&lt;/ControlId&gt;&lt;BaseName&gt;Utility Room&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;You are in a small utility room just off the kitchen. It has numerous shelves with mouldy bits of food.  You can only go back the way you came.

You can see:&lt;/d5p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;0f8a55ca-6dac-4faa-ac93-1f6e1a47680e&lt;/d5p1:Id&gt;&lt;d5p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/ToRoom&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;Exit z:Id="i54"&gt;&lt;ControlId&gt;43e1481a-71ab-460d-a67e-56fa4ec9cad4&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;3be7d5ab-bc41-468b-9f21-5258fb3d20d5&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;CanCrawl&gt;true&lt;/CanCrawl&gt;&lt;CanRun&gt;true&lt;/CanRun&gt;&lt;CanSwim&gt;false&lt;/CanSwim&gt;&lt;CanWalk&gt;true&lt;/CanWalk&gt;&lt;Direction&gt;NORTH&lt;/Direction&gt;&lt;FromRoom z:Ref="i53" /&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;ToRoom z:Ref="i40" /&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/Exit&gt;&lt;/Exits&gt;&lt;GameDescription&gt;You are stuck in a secret underground bunker. The air is running out, you have 60 minutes to use all your ingenuity to find your way out before the air runs out. Can you do it.....&lt;/GameDescription&gt;&lt;GameLogFileName&gt;The BunkerLog.txt&lt;/GameLogFileName&gt;&lt;GameLogPath&gt;C:\Users\dunnm\OneDrive\Documents\AdventureWorld&lt;/GameLogPath&gt;&lt;GameLoopPostProcessCode xmlns:d2p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d2p1:Id&gt;55213e1e-4f08-44d8-8dcf-efb68ad76424&lt;/d2p1:Id&gt;&lt;d2p1:Source /&gt;&lt;/GameLoopPostProcessCode&gt;&lt;GameLoopPreProcessCode xmlns:d2p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d2p1:Id&gt;6555e1a3-7d55-48d0-8205-d733216eba69&lt;/d2p1:Id&gt;&lt;d2p1:Source&gt;import math
from System import Char

def ShowTitle(remainingTimeSpan):
	
	milliSecondsLeft = remainingTimeSpan.TotalMilliseconds
	hoursLeft = "{:02d}".format(remainingTimeSpan.Hours)
	minutesLeft = "{:02d}".format(remainingTimeSpan.Minutes)
	secondsLeft = "{:02d}".format(remainingTimeSpan.Seconds)
	
	if milliSecondsLeft &amp;gt; 0:
		time = "{0}:{1}:{2}".format(hoursLeft, minutesLeft, secondsLeft)
		ConsoleApi.Title = "{0} : Remaining Time {1}".format(AWApi.GameData.Title, time)
		AWApi.SetVariable("timeLeft", time)
	else:
		AWApi.KillPlayer()
		ConsoleApi.SimulateKeyPress(ESCAPE)
		ConsoleApi.SimulateKeyPress(RETURN)
		
	AWApi.SetVariable("timeAllowed", milliSecondsLeft)
	
	return

startGame = AWApi.GetVariable("startGame")
timeAllowed = AWApi.GetVariable("timeAllowed")

if startGame and timeAllowed == None:
	timeAllowed = 60 * 60 * 1000
	
if startGame:
	AWApi.SetVariable("startGame", False)
	ConsoleApi.CountDownTimer(timeAllowed, 1000, None, None, ShowTitle)

		
&lt;/d2p1:Source&gt;&lt;/GameLoopPreProcessCode&gt;&lt;GameName&gt;The Bunker&lt;/GameName&gt;&lt;InitialisationCode xmlns:d2p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d2p1:Id&gt;d9e79268-5da2-4d59-9491-1cd8cbac4e8c&lt;/d2p1:Id&gt;&lt;d2p1:Source&gt;AWApi.SetVariable("startGame", True)

ConsoleApi.WriteLine("")
ConsoleApi.WriteBanner(AWApi.GameData.Title)

ConsoleApi.DrawLine(ConsoleColor.Red)
ConsoleApi.FormattedWrite(AWApi.GameData.Introduction, ConsoleColor.Yellow)
ConsoleApi.DrawLine(ConsoleColor.Red)

RustyLeg = "Rusty Leg"
Bed = "Bed"
Alcove = "Wiring Alcove"
Battery = "Cylinder"
Hammer = "Hammer"
JailCell = "Jail Cell"
Robot = "Robot"
EastCorridor = "East Corridor"

AWApi.SetVariable("jacketTaken", False)
AWApi.SetVariable("legDetached", False)
AWApi.SetVariable("clockBashed", False)
AWApi.SetVariable("robotOn", False)
AWApi.SetVariable("passWordEntered", False)
AWApi.SetVariable("passWordTries", 1)
AWApi.SetVariable("jailDoorCode", str(Random().Next(1000, 9999)))

possiblePasswords = ["banana", "password","potter","strawberry","donald","mickey"]

AWApi.SetVariable("robotPassword", possiblePasswords[Random().Next(0,5)].upper())





&lt;/d2p1:Source&gt;&lt;/InitialisationCode&gt;&lt;Introduction&gt;You gradually come to, you are lying on a hard wooden bed. 

Your head clears gradually and you try to remember what happened to you to no avail. All you can remember is that the bunker you are in has a limited oxygen supply you have to find a way out before it is all gone.

You had better get started.&lt;/Introduction&gt;&lt;LogGameConsole&gt;false&lt;/LogGameConsole&gt;&lt;MaximumInventorySize&gt;10&lt;/MaximumInventorySize&gt;&lt;MaximumScore&gt;1&lt;/MaximumScore&gt;&lt;NoItemsInRoomText&gt;Nothing&lt;/NoItemsInRoomText&gt;&lt;PlaceableObjects&gt;&lt;PlaceableObject z:Id="i55"&gt;&lt;ControlId&gt;8dde5f2a-a555-47f7-9d44-539ba6ed0304&lt;/ControlId&gt;&lt;BaseName&gt;Jail Door&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A metal barred door it is locked and will not budge. You can see that the lock has a digital combination lock in it that requires 4 single digits to be keyed in.&lt;/d4p1:string&gt;&lt;d4p1:string&gt;A metal barred door it is wide open.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;1d64c3a1-5309-40c2-a456-601a134951e4&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;true&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i44" /&gt;&lt;StartParentId&gt;57055445-1e44-4e67-99c4-0ada955b726d&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Id="i56"&gt;&lt;ControlId&gt;7722fc82-a8c6-4e63-9aa4-dce476a371da&lt;/ControlId&gt;&lt;BaseName&gt;Bed&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;The world's most uncomfortable bed.&lt;/d4p1:string&gt;&lt;d4p1:string&gt;The world's most uncomfortable bed - now minus one of its legs.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;a766eb34-17fa-43a6-b92a-d0535891d392&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):

	if adventureCommand.ParsedCommand.Word.upper() == "LOOK":
		leg = AWApi.GetPlaceableObjectFromName(RustyLeg)
		leg.Visible = True
		leg.Fixed = False
		ConsoleApi.FormattedWrite("As you search the bed you notice that one of the legs is a bit loose. If you really wanted to you could probably take it off.")
		return False
		
	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i44" /&gt;&lt;StartParentId&gt;57055445-1e44-4e67-99c4-0ada955b726d&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Id="i57"&gt;&lt;ControlId&gt;413ed65b-d9c9-4d3b-8279-0d554879b531&lt;/ControlId&gt;&lt;BaseName&gt;Clock&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A digital clock fixed to the wall.&lt;/d4p1:string&gt;&lt;d4p1:string&gt;The clock is slowly counting down your remaining life. It currently shows ##timeLeft##.

Looking more closely at it you see that it is partially detached from the wall, it might come off with a bit of effort.&lt;/d4p1:string&gt;&lt;d4p1:string&gt;A broken digital clock, hanging off the wall. It still appears to be working though, It currently shows ##timeLeft##.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;0d8c7a0e-0b26-41b0-aea2-59f141658085&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):

	if adventureCommand.ParsedCommand.Word.upper() == "LOOK":
		ConsoleApi.FormattedWrite(adventureObject.Descriptions[1])
		return False
		
	if adventureCommand.ParsedCommand.Word.upper() == "TAKE":
		ConsoleApi.FormattedWrite("With a huge effort you move it a bit, if only you had something to hit it with.")
		return False
	
	if adventureCommand.ParsedCommand.Word.upper() == "HIT":
		
		if not AWApi.GetVariable("clockBashed"):
			ConsoleApi.FormattedWrite("With a mighty blow you smash the clock with the hammer. It doesn't come off completely but behind it you can see a alcove in the wall.")
			adventureObject.CurrentDescriptionIndex = 2
			AWApi.GetPlaceableObjectFromName(Alcove).Visible = True
			AWApi.SetVariable("clockBashed", True)
		else:
			ConsoleApi.FormattedWrite("You've done that once, no need for more violence!!")
			
		return False

	return True&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i37" /&gt;&lt;StartParentId&gt;121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Id="i58"&gt;&lt;ControlId&gt;2c031f7c-3761-46b8-aab5-fd8c300bc4a0&lt;/ControlId&gt;&lt;BaseName&gt;Rusty Leg&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A rusty old leg that was once attached to a bed.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;2222f028-250d-4011-aa72-27e720ef9534&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):

	if adventureCommand.ParsedCommand.Word.upper() == "TAKE":
		if not AWApi.GetVariable("legDetached"):
			ConsoleApi.FormattedWrite("After a bit of a struggle you manage to wrestle it from the bed. The bed now on three legs drops on your foot ouch!! Something drops out of the mattress and rolls across the floor.")
			adventureObject.HideFromAutoList = False
			adventureObject.IsHeld = True
			adventureObject.Visible = True
			adventureObject.Fixed = False
			AWApi.GetPlaceableObjectFromName(Battery).Visible = True
			AWApi.GetPlaceableObjectFromName(Bed).CurrentDescriptionIndex = 1
			AWApi.SetVariable("legDetached", True)
			return False
			
	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;true&lt;/HideFromAutoList&gt;&lt;InventoryDescription&gt;Rusty Bed Leg&lt;/InventoryDescription&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i44" /&gt;&lt;StartParentId&gt;57055445-1e44-4e67-99c4-0ada955b726d&lt;/StartParentId&gt;&lt;Visible&gt;false&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Id="i59"&gt;&lt;ControlId&gt;2b6d0ca6-13ac-4efc-a6c2-36da5221a15b&lt;/ControlId&gt;&lt;BaseName&gt;Wiring Alcove&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A small alcove in the wall behind the clock.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;d63d13b4-29e1-4305-92eb-839112c2f912&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):

	if adventureCommand.ParsedCommand.Word.upper() == "LOOK":
		ConsoleApi.FormattedWrite("Its too high to look at, you need something to stand on.")
		return False
		
	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i37" /&gt;&lt;StartParentId&gt;121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a&lt;/StartParentId&gt;&lt;Visible&gt;false&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Id="i60" i:type="Npc"&gt;&lt;ControlId&gt;69d0c30f-12a1-425c-8d32-d098d47e5b99&lt;/ControlId&gt;&lt;BaseName&gt;Robot&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A small Robot shaped like a football with a row of lights for a face. &lt;/d4p1:string&gt;&lt;d4p1:string&gt;Cyber systems Concierge Robot Model 5656. The robots face lights are blinking.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;26f5e00e-6caa-4c2b-9d57-1f1e75cf5772&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):
	
	# Robot not activated
	if adventureCommand.ParsedCommand.Word.upper() == "TALK" and not AWApi.GetVariable("robotOn"):
		ConsoleApi.FormattedWrite("Silence..the robot seems to be deactivated.")
		return False
		
	# Password not entered
	if adventureCommand.ParsedCommand.Word.upper() == "TALK" and not AWApi.GetVariable("passWordEntered"):
	
		if (AWApi.GetVariable("passWordTries") &amp;gt; 3):
			ConsoleApi.FormattedWrite("Sorry your access is suspended.")
			return False
			
		ConsoleApi.FormattedWrite("Greetings I am the Cyber systems Concierge Robot Model 5656. Please input your operator password.")
		pwdLen = len(AWApi.GetVariable("robotPassword"))
		code = ConsoleApi.ReadAlphaNumericString(pwdLen, "?" )
		Console.WriteLine()
	
		if code.lower() == AWApi.GetVariable("robotPassword").lower():
			AWApi.SetVariable("passWordEntered", True)
			ConsoleApi.FormattedWrite("Password is correct. Thank you.")
			adventureObject.SetCurrentConversation("Conversation1")
			return True
		else:
			AWApi.SetVariable("passWordTries", AWApi.GetVariable("passWordTries") + 1)
			triesLeft = 3 -  AWApi.GetVariable("passWordTries")
			ConsoleApi.FormattedWrite("Incorrect pasword, you have {} more tries.".format(triesLeft))
			return False
	
	if adventureCommand.ParsedCommand.Word.upper() == "LOOK" and not AWApi.GetVariable("robotOn"):
		ConsoleApi.FormattedWrite("The robot is silent and looks to be deactivated. As you look closer you see there is an empty cylinder shaped alcove in the robot's back.")
		return False
	
	if adventureCommand.ParsedCommand.Word.upper() == "LOOK" and AWApi.GetVariable("robotOn"):
		ConsoleApi.FormattedWrite("The robot's face lights blink on and off.")
		return False
		
	if adventureCommand.ParsedCommand.Word.upper() == "PLACE":
	 	AWApi.SetVariable("robotOn", True)
	 	adventureObject.CurrentDescriptionIndex = 1
	 	AWApi.GetPlaceableObjectFromName(Battery).Visible = False
		ConsoleApi.FormattedWrite("As you place the battery in the Robot, the lights on the front start to flicker.")
		ConsoleApi.FormattedWrite("An thin electronic voice says: 'CYBER SYSTEMS Concierge Robot Model 5656 starting up.'")
		return False
		
	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i47" /&gt;&lt;StartParentId&gt;b4386267-8e76-4a74-a4b3-c524d614652c&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;IsOpen&gt;false&lt;/IsOpen&gt;&lt;PlaceableObjects /&gt;&lt;AutoFollow&gt;false&lt;/AutoFollow&gt;&lt;ConversationTree z:Id="i61"&gt;&lt;Conversations&gt;&lt;Conversation z:Id="i62"&gt;&lt;ControlId&gt;74b62482-ab1b-4879-a87e-11e1342e54df&lt;/ControlId&gt;&lt;BaseName&gt;CONVERSATION1&lt;/BaseName&gt;&lt;Descriptions xmlns:d7p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d7p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d7p1:Id&gt;eaf99ccc-974b-4c86-bd53-4ca0eb8eea10&lt;/d7p1:Id&gt;&lt;d7p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d7p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;ConversationPreprocessScript xmlns:d7p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d7p1:Id&gt;6eaa8a96-00f7-4ad6-8876-a0546d39f331&lt;/d7p1:Id&gt;&lt;d7p1:Source /&gt;&lt;/ConversationPreprocessScript&gt;&lt;ConversationText z:Id="i63"&gt;&lt;ControlId&gt;9253d2a4-e82d-4879-82a2-3e082565268b&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d8p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d8p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d8p1:Id&gt;467d1907-fe52-47c3-9d28-1df67bd0a9a6&lt;/d8p1:Id&gt;&lt;d8p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d8p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;ConversationPreprocessScript xmlns:d8p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d8p1:Id&gt;e8527407-5e75-4bdc-82d2-82f00625cfb5&lt;/d8p1:Id&gt;&lt;d8p1:Source /&gt;&lt;/ConversationPreprocessScript&gt;&lt;ConversationResponses&gt;&lt;ConversationResponse z:Id="i64"&gt;&lt;ControlId&gt;87304e76-adb1-4bc7-a1e0-8838f6e96b10&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d10p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d10p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d10p1:Id&gt;429c5744-908b-4ea0-a3f4-e20e4eb388e5&lt;/d10p1:Id&gt;&lt;d10p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d10p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;ConversationPreprocessScript xmlns:d10p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d10p1:Id&gt;ec36086d-b6b1-46c6-9bfa-16e293bb5fb9&lt;/d10p1:Id&gt;&lt;d10p1:Source /&gt;&lt;/ConversationPreprocessScript&gt;&lt;ConversationText z:Id="i65"&gt;&lt;ControlId&gt;2f757c6f-5b74-4876-b761-1f00a26b5572&lt;/ControlId&gt;&lt;BaseName i:nil="true" /&gt;&lt;Descriptions xmlns:d11p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" i:nil="true" /&gt;&lt;ImagePath i:nil="true" /&gt;&lt;ObjectPreprocessScript xmlns:d11p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d11p1:Id&gt;a76cc772-3486-42c3-a7f9-04c18bf53b7f&lt;/d11p1:Id&gt;&lt;d11p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d11p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;ConversationPreprocessScript xmlns:d11p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d11p1:Id&gt;111358b1-9e0f-418a-a623-5383272040b7&lt;/d11p1:Id&gt;&lt;d11p1:Source&gt;def Execute(npc, conversationObject, conversationStage):
	
	# Move the Robot
	robot = AWApi.GetNpcFromName(Robot)
	robot.Parent = AWApi.GetRoomFromName(EastCorridor)
	
	# Open the exit
	exit = AWApi.GetExitFromName(EastCorridor, "EAST")
	exit.IsLocked = False
	EastCorridor.CurrentDescriptionIndex = 1
	robot.Conversation = None
	
	return True
	&lt;/d11p1:Source&gt;&lt;/ConversationPreprocessScript&gt;&lt;ConversationResponses /&gt;&lt;Text&gt;Certainly! Please wait and I will attend to it immediately.

With a whoosh of compressed air the Robot trundles off and disappears down the corridor, leaving you in silence.&lt;/Text&gt;&lt;/ConversationText&gt;&lt;Response&gt;Open the cupboard door at the end of the corridor&lt;/Response&gt;&lt;SortOrder&gt;0&lt;/SortOrder&gt;&lt;/ConversationResponse&gt;&lt;/ConversationResponses&gt;&lt;Text&gt;Greetings, you are authorised to use my services. Please select one.&lt;/Text&gt;&lt;/ConversationText&gt;&lt;EscapeText&gt;Quit&lt;/EscapeText&gt;&lt;/Conversation&gt;&lt;/Conversations&gt;&lt;ValidationItems /&gt;&lt;/ConversationTree&gt;&lt;CurrentConversation i:nil="true" /&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Id="i66"&gt;&lt;ControlId&gt;98209413-4fd6-4d91-8411-4baed591e507&lt;/ControlId&gt;&lt;BaseName&gt;Cylinder&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A cylinder, it is smooth and made out of metal.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;833ef9a0-b2af-434a-ad82-576e5d71a343&lt;/d4p1:Id&gt;&lt;d4p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;false&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i44" /&gt;&lt;StartParentId&gt;57055445-1e44-4e67-99c4-0ada955b726d&lt;/StartParentId&gt;&lt;Visible&gt;false&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Id="i67" i:type="Container"&gt;&lt;ControlId&gt;56d1cedc-9f40-43fa-bbab-77d627bd0a9e&lt;/ControlId&gt;&lt;BaseName&gt;Guard Jacket&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A prison guard's jacket.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;f6e01307-a64b-4c22-8afa-499c3778987b&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;def Execute(adventureObject, adventureCommand):

	if adventureCommand.ParsedCommand.Word.upper() == "LOOK" and AWApi.GetVariable("jacketTaken") and adventureObject.IsHeld:
		ConsoleApi.FormattedWrite("Now you have the jacket in your hand you can take a closer look. You notice it has a breast pocket closed by a flap.")
		return False
	
	if adventureCommand.ParsedCommand.Word.upper() == "LOOK" and not adventureObject.IsHeld:
		ConsoleApi.FormattedWrite("You will have to be holding it to take a closer look.")
		return False
		
	# Every time we take the jacket ensure we can see what's in it
	if adventureCommand.ParsedCommand.Word.upper() == "TAKE":
			adventureObject.IsOpen = True
	
	# Can't see whats in the jacket if we havn't got it
	if adventureCommand.ParsedCommand.Word.upper() == "DROP":
			adventureObject.IsOpen = False

	if adventureCommand.ParsedCommand.Word.upper() == "TAKE" and not AWApi.GetVariable("jacketTaken"):
		leg = AWApi.GetPlaceableObjectFromName(RustyLeg)
		
		if leg.IsHeld:
			ConsoleApi.FormattedWrite("With the bed leg in hand you manage to reach through the bars and snag the jacket - well done!")
			adventureObject.Visible = True
			adventureObject.IsHeld = True
			adventureObject.HideFromAutoList = False
			adventureObject.IsOpen = True
			AWApi.GetRoomFromName(JailCell).CurrentDescriptionIndex = 1
			AWApi.SetVariable("jacketTaken", True)
		elif not leg.Visible:
			ConsoleApi.FormattedWrite("It's just out of reach, if only you had something to grab it with.")
					
		return False
		
	return True&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;false&lt;/Fixed&gt;&lt;HideFromAutoList&gt;true&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i44" /&gt;&lt;StartParentId&gt;57055445-1e44-4e67-99c4-0ada955b726d&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;IsOpen&gt;false&lt;/IsOpen&gt;&lt;PlaceableObjects&gt;&lt;PlaceableObject z:Id="i68" i:type="Container"&gt;&lt;ControlId&gt;b15fb391-08b0-427e-954e-47a1e6f873d1&lt;/ControlId&gt;&lt;BaseName&gt;Pocket&lt;/BaseName&gt;&lt;Descriptions xmlns:d6p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d6p1:string&gt;A flapped breast pocket in the guard's uniform.&lt;/d6p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d6p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d6p1:Id&gt;063a48e5-3dc1-41a8-b6b7-1b3c9dc727c2&lt;/d6p1:Id&gt;&lt;d6p1:Source /&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;true&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i67" /&gt;&lt;StartParentId&gt;56d1cedc-9f40-43fa-bbab-77d627bd0a9e&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;IsOpen&gt;false&lt;/IsOpen&gt;&lt;PlaceableObjects&gt;&lt;PlaceableObject z:Id="i69"&gt;&lt;ControlId&gt;1f6b9c52-ded7-4a2f-bd0b-1eb7750b6add&lt;/ControlId&gt;&lt;BaseName&gt;Paper Note&lt;/BaseName&gt;&lt;Descriptions xmlns:d8p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d8p1:string&gt;A yellowed and crumpled piece of paper.&lt;/d8p1:string&gt;&lt;d8p1:string&gt;Stuf to rember

##robotPassword##
##jailDoorCode##&lt;/d8p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d8p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d8p1:Id&gt;876f406d-a73d-400d-93bf-2abeb3717d28&lt;/d8p1:Id&gt;&lt;d8p1:Source&gt;def Execute(adventureObject, adventureCommand):

	if adventureCommand.ParsedCommand.Word.upper() == "READ":
		ConsoleApi.FormattedWrite(adventureObject.Descriptions[1])
		return False
		
	return True&lt;/d8p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;false&lt;/Fixed&gt;&lt;HideFromAutoList&gt;true&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i68" /&gt;&lt;StartParentId&gt;b15fb391-08b0-427e-954e-47a1e6f873d1&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;/PlaceableObjects&gt;&lt;/PlaceableObject&gt;&lt;/PlaceableObjects&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Ref="i68" /&gt;&lt;PlaceableObject z:Ref="i69" /&gt;&lt;PlaceableObject z:Id="i70"&gt;&lt;ControlId&gt;59bb6753-9a1c-49c8-b514-86731b469faa&lt;/ControlId&gt;&lt;BaseName&gt;Empty Bottle&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A empty beer bottle, with a cork stopper.&lt;/d4p1:string&gt;&lt;d4p1:string&gt;A beer bottle that is now full of water.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;46f79bc4-6951-4244-a1fe-c5eece29c26f&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;false&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription&gt;An empty bottle.&lt;/InventoryDescription&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Id="i71" i:type="Container"&gt;&lt;ControlId&gt;a85bf1e4-67ed-4f7f-ac64-06a745e71bc6&lt;/ControlId&gt;&lt;BaseName&gt;Cupboard&lt;/BaseName&gt;&lt;Descriptions xmlns:d5p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d5p1:string&gt;A wooden cupboard.&lt;/d5p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d5p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d5p1:Id&gt;b097c877-c15b-4290-a779-8c3113b51717&lt;/d5p1:Id&gt;&lt;d5p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d5p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i40" /&gt;&lt;StartParentId&gt;d5e5f953-6585-4ca6-aa1f-bd4faf71a65b&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;IsOpen&gt;false&lt;/IsOpen&gt;&lt;PlaceableObjects&gt;&lt;PlaceableObject z:Ref="i70" /&gt;&lt;PlaceableObject z:Id="i72"&gt;&lt;ControlId&gt;7910b440-e57c-46ba-b7fc-36377e730a38&lt;/ControlId&gt;&lt;BaseName&gt;Hammer&lt;/BaseName&gt;&lt;Descriptions xmlns:d7p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d7p1:string&gt;A hammer with a wooden handle and a metal head.&lt;/d7p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d7p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d7p1:Id&gt;6b11362e-44c0-4614-be1d-b53fb13fe0d8&lt;/d7p1:Id&gt;&lt;d7p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d7p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;false&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription&gt;A hammer.&lt;/InventoryDescription&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i71" /&gt;&lt;StartParentId&gt;a85bf1e4-67ed-4f7f-ac64-06a745e71bc6&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;/PlaceableObjects&gt;&lt;/Parent&gt;&lt;StartParentId&gt;a85bf1e4-67ed-4f7f-ac64-06a745e71bc6&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Ref="i71" /&gt;&lt;PlaceableObject z:Id="i73"&gt;&lt;ControlId&gt;bef065ea-1246-4e35-bc8e-4ef30b2e2413&lt;/ControlId&gt;&lt;BaseName&gt;Sink&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d4p1:string&gt;A stainless steel sink, with a single tap.&lt;/d4p1:string&gt;&lt;/Descriptions&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;100d63ae-5ca6-4672-904b-1a9df173c574&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;true&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i40" /&gt;&lt;StartParentId&gt;d5e5f953-6585-4ca6-aa1f-bd4faf71a65b&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;/PlaceableObject&gt;&lt;PlaceableObject z:Ref="i72" /&gt;&lt;PlaceableObject z:Id="i74" i:type="Npc"&gt;&lt;ControlId&gt;92cd7556-64ba-4e5b-92be-94faf6bab2b4&lt;/ControlId&gt;&lt;BaseName&gt;NPC1&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;c1febd8e-98bc-4425-b9dd-5fcc102f2815&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;Fixed&gt;false&lt;/Fixed&gt;&lt;HideFromAutoList&gt;false&lt;/HideFromAutoList&gt;&lt;InventoryDescription i:nil="true" /&gt;&lt;IsHeld&gt;false&lt;/IsHeld&gt;&lt;IsLightSource&gt;false&lt;/IsLightSource&gt;&lt;IsLit&gt;false&lt;/IsLit&gt;&lt;Parent z:Ref="i37" /&gt;&lt;StartParentId&gt;121ebbb4-8b4b-4b4a-99d9-de0708ee2c8a&lt;/StartParentId&gt;&lt;Visible&gt;true&lt;/Visible&gt;&lt;IsLocked&gt;false&lt;/IsLocked&gt;&lt;IsOpen&gt;false&lt;/IsOpen&gt;&lt;PlaceableObjects /&gt;&lt;AutoFollow&gt;false&lt;/AutoFollow&gt;&lt;ConversationTree i:nil="true" /&gt;&lt;CurrentConversation i:nil="true" /&gt;&lt;/PlaceableObject&gt;&lt;/PlaceableObjects&gt;&lt;PlayerLostMessage&gt;You gasp for air, but its no good there isn't any, slowly everything turns black.&lt;/PlayerLostMessage&gt;&lt;ProjectDirectory&gt;C:\Users\dunnm\OneDrive\AdventureGames&lt;/ProjectDirectory&gt;&lt;Rooms&gt;&lt;Room z:Ref="i44" /&gt;&lt;Room z:Ref="i37" /&gt;&lt;Room z:Ref="i38" /&gt;&lt;Room z:Ref="i40" /&gt;&lt;Room z:Ref="i47" /&gt;&lt;Room z:Ref="i50" /&gt;&lt;Room z:Ref="i53" /&gt;&lt;Room z:Id="i75"&gt;&lt;ControlId&gt;6548f49f-524a-44a8-81d8-46214d97d985&lt;/ControlId&gt;&lt;BaseName&gt;ROOM1&lt;/BaseName&gt;&lt;Descriptions xmlns:d4p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ImagePath /&gt;&lt;ObjectPreprocessScript xmlns:d4p1="http://schemas.datacontract.org/2004/07/AdventureLandCore.Domain"&gt;&lt;d4p1:Id&gt;701f1b48-5104-4bf9-8d6b-a3c5bb4afb8b&lt;/d4p1:Id&gt;&lt;d4p1:Source&gt;# This is a template for an AdventureObject pre-process command. AdventureObjects are Rooms, Exits, Containers and PlaceableObjects. Whenever a command is run against 
# one of these types types, this script is executed. It can be used to perform custom actions whenever the player interacts with something. 

# The commented out code below illustrates how to use this for a room object to switch between dark and light descriptions.
def Execute(adventureObject, adventureCommand):
	## Pre-requisite ensure the rooms has 2 descriptions, the first one for a lit condition, the second for a dark condition
	## You can set them up in the game designer or code them directly here

	##if adventureCommand.CommandMapping.VerbName == "LOOK":
	#	if adventureObject.IsDark:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[1]
	#	else:
	#		adventureObject.CurrentDescription = adventureObject.Descriptions[0]
	#
	## We want processing to continue whatever happens so set the flag to True (False ensures no further processing is done by the game engine)

	return True
	&lt;/d4p1:Source&gt;&lt;/ObjectPreprocessScript&gt;&lt;ShowRandomDescription&gt;false&lt;/ShowRandomDescription&gt;&lt;_raiseNotifications&gt;true&lt;/_raiseNotifications&gt;&lt;IsDark&gt;false&lt;/IsDark&gt;&lt;/Room&gt;&lt;/Rooms&gt;&lt;ShowImages&gt;true&lt;/ShowImages&gt;&lt;StartRoomId&gt;d5e5f953-6585-4ca6-aa1f-bd4faf71a65b&lt;/StartRoomId&gt;&lt;StopWords&gt;a
about
above
after
again
against
am
an
and
any
are
arent
around
as
at
be
because
been
before
being
below
between
both
but
by
cant
cannot
could
couldnt
did
didnt
do
does
doesnt
doing
dont
during
each
few
for
from
further
had
hadnt
has
hasnt
have
havent
having
he
hed
hell
hes
her
here
heres
hers
herself
him
himself
his
how
hows
i
id
ill
im
ive
if
in
inside
into
is
isnt
it
its
its
itself
lets
me
more
most
mustnt
my
myself
no
nor
not
of
off
on
once
only
or
other
ought
our
ours
ourselves
out
over
own
room
same
shant
she
shed
shell
shes
should
shouldnt
so
some
such
than
that
thats
the
their
theirs
them
themselves
then
there
theres
these
they
theyd
theyll
theyre
theyve
this
those
through
to
too
under
until
very
was
wasnt
we
wed
well
were
weve
were
werent
what
whats
when
whens
where
wheres
which
while
who
whos
whom
why
whys
with
wont
would
wouldnt
you
youd
youll
youre
youve
your
yours
yourself
yourselves&lt;/StopWords&gt;&lt;Title&gt;The Bunker&lt;/Title&gt;&lt;WonGame i:nil="true" /&gt;&lt;/AdventureGameDesignerViewModel&gt;</AdventureGame>
</Root>